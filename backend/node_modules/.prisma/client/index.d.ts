
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model GroupSuggestion
 * 
 */
export type GroupSuggestion = $Result.DefaultSelection<Prisma.$GroupSuggestionPayload>
/**
 * Model UserSuggestion
 * 
 */
export type UserSuggestion = $Result.DefaultSelection<Prisma.$UserSuggestionPayload>
/**
 * Model Media
 * 
 */
export type Media = $Result.DefaultSelection<Prisma.$MediaPayload>
/**
 * Model Group
 * 
 */
export type Group = $Result.DefaultSelection<Prisma.$GroupPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  user: 'user',
  admin: 'admin'
};

export type Role = (typeof Role)[keyof typeof Role]


export const MediaType: {
  movie: 'movie',
  series: 'series'
};

export type MediaType = (typeof MediaType)[keyof typeof MediaType]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type MediaType = $Enums.MediaType

export const MediaType: typeof $Enums.MediaType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.groupSuggestion`: Exposes CRUD operations for the **GroupSuggestion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GroupSuggestions
    * const groupSuggestions = await prisma.groupSuggestion.findMany()
    * ```
    */
  get groupSuggestion(): Prisma.GroupSuggestionDelegate<ExtArgs>;

  /**
   * `prisma.userSuggestion`: Exposes CRUD operations for the **UserSuggestion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSuggestions
    * const userSuggestions = await prisma.userSuggestion.findMany()
    * ```
    */
  get userSuggestion(): Prisma.UserSuggestionDelegate<ExtArgs>;

  /**
   * `prisma.media`: Exposes CRUD operations for the **Media** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Media
    * const media = await prisma.media.findMany()
    * ```
    */
  get media(): Prisma.MediaDelegate<ExtArgs>;

  /**
   * `prisma.group`: Exposes CRUD operations for the **Group** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Groups
    * const groups = await prisma.group.findMany()
    * ```
    */
  get group(): Prisma.GroupDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.21.1
   * Query Engine version: bf0e5e8a04cada8225617067eaa03d041e2bba36
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    GroupSuggestion: 'GroupSuggestion',
    UserSuggestion: 'UserSuggestion',
    Media: 'Media',
    Group: 'Group'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "groupSuggestion" | "userSuggestion" | "media" | "group"
      txIsolationLevel: never
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UserFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.UserAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      GroupSuggestion: {
        payload: Prisma.$GroupSuggestionPayload<ExtArgs>
        fields: Prisma.GroupSuggestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GroupSuggestionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupSuggestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GroupSuggestionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupSuggestionPayload>
          }
          findFirst: {
            args: Prisma.GroupSuggestionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupSuggestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GroupSuggestionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupSuggestionPayload>
          }
          findMany: {
            args: Prisma.GroupSuggestionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupSuggestionPayload>[]
          }
          create: {
            args: Prisma.GroupSuggestionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupSuggestionPayload>
          }
          createMany: {
            args: Prisma.GroupSuggestionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.GroupSuggestionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupSuggestionPayload>
          }
          update: {
            args: Prisma.GroupSuggestionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupSuggestionPayload>
          }
          deleteMany: {
            args: Prisma.GroupSuggestionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GroupSuggestionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GroupSuggestionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupSuggestionPayload>
          }
          aggregate: {
            args: Prisma.GroupSuggestionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGroupSuggestion>
          }
          groupBy: {
            args: Prisma.GroupSuggestionGroupByArgs<ExtArgs>
            result: $Utils.Optional<GroupSuggestionGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.GroupSuggestionFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.GroupSuggestionAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.GroupSuggestionCountArgs<ExtArgs>
            result: $Utils.Optional<GroupSuggestionCountAggregateOutputType> | number
          }
        }
      }
      UserSuggestion: {
        payload: Prisma.$UserSuggestionPayload<ExtArgs>
        fields: Prisma.UserSuggestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserSuggestionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSuggestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserSuggestionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSuggestionPayload>
          }
          findFirst: {
            args: Prisma.UserSuggestionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSuggestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserSuggestionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSuggestionPayload>
          }
          findMany: {
            args: Prisma.UserSuggestionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSuggestionPayload>[]
          }
          create: {
            args: Prisma.UserSuggestionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSuggestionPayload>
          }
          createMany: {
            args: Prisma.UserSuggestionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserSuggestionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSuggestionPayload>
          }
          update: {
            args: Prisma.UserSuggestionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSuggestionPayload>
          }
          deleteMany: {
            args: Prisma.UserSuggestionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserSuggestionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserSuggestionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSuggestionPayload>
          }
          aggregate: {
            args: Prisma.UserSuggestionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserSuggestion>
          }
          groupBy: {
            args: Prisma.UserSuggestionGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserSuggestionGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UserSuggestionFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.UserSuggestionAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.UserSuggestionCountArgs<ExtArgs>
            result: $Utils.Optional<UserSuggestionCountAggregateOutputType> | number
          }
        }
      }
      Media: {
        payload: Prisma.$MediaPayload<ExtArgs>
        fields: Prisma.MediaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MediaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MediaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaPayload>
          }
          findFirst: {
            args: Prisma.MediaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MediaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaPayload>
          }
          findMany: {
            args: Prisma.MediaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaPayload>[]
          }
          create: {
            args: Prisma.MediaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaPayload>
          }
          createMany: {
            args: Prisma.MediaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MediaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaPayload>
          }
          update: {
            args: Prisma.MediaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaPayload>
          }
          deleteMany: {
            args: Prisma.MediaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MediaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MediaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaPayload>
          }
          aggregate: {
            args: Prisma.MediaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMedia>
          }
          groupBy: {
            args: Prisma.MediaGroupByArgs<ExtArgs>
            result: $Utils.Optional<MediaGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.MediaFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.MediaAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.MediaCountArgs<ExtArgs>
            result: $Utils.Optional<MediaCountAggregateOutputType> | number
          }
        }
      }
      Group: {
        payload: Prisma.$GroupPayload<ExtArgs>
        fields: Prisma.GroupFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GroupFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GroupFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          findFirst: {
            args: Prisma.GroupFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GroupFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          findMany: {
            args: Prisma.GroupFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>[]
          }
          create: {
            args: Prisma.GroupCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          createMany: {
            args: Prisma.GroupCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.GroupDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          update: {
            args: Prisma.GroupUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          deleteMany: {
            args: Prisma.GroupDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GroupUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GroupUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          aggregate: {
            args: Prisma.GroupAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGroup>
          }
          groupBy: {
            args: Prisma.GroupGroupByArgs<ExtArgs>
            result: $Utils.Optional<GroupGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.GroupFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.GroupAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.GroupCountArgs<ExtArgs>
            result: $Utils.Optional<GroupCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    suggestions: number
    groups: number
    createdGroups: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    suggestions?: boolean | UserCountOutputTypeCountSuggestionsArgs
    groups?: boolean | UserCountOutputTypeCountGroupsArgs
    createdGroups?: boolean | UserCountOutputTypeCountCreatedGroupsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSuggestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSuggestionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGroupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedGroupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupWhereInput
  }


  /**
   * Count Type GroupCountOutputType
   */

  export type GroupCountOutputType = {
    users: number
    suggestions: number
  }

  export type GroupCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | GroupCountOutputTypeCountUsersArgs
    suggestions?: boolean | GroupCountOutputTypeCountSuggestionsArgs
  }

  // Custom InputTypes
  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupCountOutputType
     */
    select?: GroupCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeCountSuggestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupSuggestionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    age: number | null
  }

  export type UserSumAggregateOutputType = {
    age: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    password: string | null
    age: number | null
    image: string | null
    status: boolean | null
    role: $Enums.Role | null
    firstTime: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    password: string | null
    age: number | null
    image: string | null
    status: boolean | null
    role: $Enums.Role | null
    firstTime: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    email: number
    password: number
    age: number
    image: number
    status: number
    role: number
    firstTime: number
    mediaId: number
    likes: number
    dislikes: number
    genres: number
    createdAt: number
    updatedAt: number
    groupsId: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    age?: true
  }

  export type UserSumAggregateInputType = {
    age?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    age?: true
    image?: true
    status?: true
    role?: true
    firstTime?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    age?: true
    image?: true
    status?: true
    role?: true
    firstTime?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    age?: true
    image?: true
    status?: true
    role?: true
    firstTime?: true
    mediaId?: true
    likes?: true
    dislikes?: true
    genres?: true
    createdAt?: true
    updatedAt?: true
    groupsId?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    username: string
    email: string
    password: string
    age: number
    image: string | null
    status: boolean
    role: $Enums.Role
    firstTime: boolean
    mediaId: string
    likes: string[]
    dislikes: string[]
    genres: string[]
    createdAt: Date
    updatedAt: Date
    groupsId: string[]
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    age?: boolean
    image?: boolean
    status?: boolean
    role?: boolean
    firstTime?: boolean
    likes?: boolean
    dislikes?: boolean
    genres?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    groupsId?: boolean
    suggestions?: boolean | User$suggestionsArgs<ExtArgs>
    groups?: boolean | User$groupsArgs<ExtArgs>
    createdGroups?: boolean | User$createdGroupsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    age?: boolean
    image?: boolean
    status?: boolean
    role?: boolean
    firstTime?: boolean
    likes?: boolean
    dislikes?: boolean
    genres?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    groupsId?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    suggestions?: boolean | User$suggestionsArgs<ExtArgs>
    groups?: boolean | User$groupsArgs<ExtArgs>
    createdGroups?: boolean | User$createdGroupsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      suggestions: Prisma.$UserSuggestionPayload<ExtArgs>[]
      groups: Prisma.$GroupPayload<ExtArgs>[]
      createdGroups: Prisma.$GroupPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      email: string
      password: string
      age: number
      image: string | null
      status: boolean
      role: $Enums.Role
      firstTime: boolean
      likes: string[]
      dislikes: string[]
      genres: string[]
      createdAt: Date
      updatedAt: Date
      groupsId: string[]
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * @param {UserFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const user = await prisma.user.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: UserFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a User.
     * @param {UserAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const user = await prisma.user.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: UserAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    suggestions<T extends User$suggestionsArgs<ExtArgs> = {}>(args?: Subset<T, User$suggestionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSuggestionPayload<ExtArgs>, T, "findMany"> | Null>
    groups<T extends User$groupsArgs<ExtArgs> = {}>(args?: Subset<T, User$groupsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findMany"> | Null>
    createdGroups<T extends User$createdGroupsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdGroupsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly age: FieldRef<"User", 'Int'>
    readonly image: FieldRef<"User", 'String'>
    readonly status: FieldRef<"User", 'Boolean'>
    readonly role: FieldRef<"User", 'Role'>
    readonly firstTime: FieldRef<"User", 'Boolean'>
    readonly likes: FieldRef<"User", 'String[]'>
    readonly dislikes: FieldRef<"User", 'String[]'>
    readonly genres: FieldRef<"User", 'String[]'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly groupsId: FieldRef<"User", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User findRaw
   */
  export type UserFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User aggregateRaw
   */
  export type UserAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User.suggestions
   */
  export type User$suggestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSuggestion
     */
    select?: UserSuggestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSuggestionInclude<ExtArgs> | null
    where?: UserSuggestionWhereInput
    orderBy?: UserSuggestionOrderByWithRelationInput | UserSuggestionOrderByWithRelationInput[]
    cursor?: UserSuggestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserSuggestionScalarFieldEnum | UserSuggestionScalarFieldEnum[]
  }

  /**
   * User.groups
   */
  export type User$groupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    where?: GroupWhereInput
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    cursor?: GroupWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * User.createdGroups
   */
  export type User$createdGroupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    where?: GroupWhereInput
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    cursor?: GroupWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model GroupSuggestion
   */

  export type AggregateGroupSuggestion = {
    _count: GroupSuggestionCountAggregateOutputType | null
    _min: GroupSuggestionMinAggregateOutputType | null
    _max: GroupSuggestionMaxAggregateOutputType | null
  }

  export type GroupSuggestionMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    type: $Enums.MediaType | null
    groupId: string | null
  }

  export type GroupSuggestionMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    type: $Enums.MediaType | null
    groupId: string | null
  }

  export type GroupSuggestionCountAggregateOutputType = {
    id: number
    title: number
    description: number
    genres: number
    type: number
    platforms: number
    groupId: number
    _all: number
  }


  export type GroupSuggestionMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    groupId?: true
  }

  export type GroupSuggestionMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    groupId?: true
  }

  export type GroupSuggestionCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    genres?: true
    type?: true
    platforms?: true
    groupId?: true
    _all?: true
  }

  export type GroupSuggestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GroupSuggestion to aggregate.
     */
    where?: GroupSuggestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupSuggestions to fetch.
     */
    orderBy?: GroupSuggestionOrderByWithRelationInput | GroupSuggestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GroupSuggestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupSuggestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupSuggestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GroupSuggestions
    **/
    _count?: true | GroupSuggestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupSuggestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupSuggestionMaxAggregateInputType
  }

  export type GetGroupSuggestionAggregateType<T extends GroupSuggestionAggregateArgs> = {
        [P in keyof T & keyof AggregateGroupSuggestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroupSuggestion[P]>
      : GetScalarType<T[P], AggregateGroupSuggestion[P]>
  }




  export type GroupSuggestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupSuggestionWhereInput
    orderBy?: GroupSuggestionOrderByWithAggregationInput | GroupSuggestionOrderByWithAggregationInput[]
    by: GroupSuggestionScalarFieldEnum[] | GroupSuggestionScalarFieldEnum
    having?: GroupSuggestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupSuggestionCountAggregateInputType | true
    _min?: GroupSuggestionMinAggregateInputType
    _max?: GroupSuggestionMaxAggregateInputType
  }

  export type GroupSuggestionGroupByOutputType = {
    id: string
    title: string
    description: string
    genres: string[]
    type: $Enums.MediaType
    platforms: string[]
    groupId: string
    _count: GroupSuggestionCountAggregateOutputType | null
    _min: GroupSuggestionMinAggregateOutputType | null
    _max: GroupSuggestionMaxAggregateOutputType | null
  }

  type GetGroupSuggestionGroupByPayload<T extends GroupSuggestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GroupSuggestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupSuggestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupSuggestionGroupByOutputType[P]>
            : GetScalarType<T[P], GroupSuggestionGroupByOutputType[P]>
        }
      >
    >


  export type GroupSuggestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    genres?: boolean
    type?: boolean
    platforms?: boolean
    groupId?: boolean
    group?: boolean | GroupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groupSuggestion"]>


  export type GroupSuggestionSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    genres?: boolean
    type?: boolean
    platforms?: boolean
    groupId?: boolean
  }

  export type GroupSuggestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    group?: boolean | GroupDefaultArgs<ExtArgs>
  }

  export type $GroupSuggestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GroupSuggestion"
    objects: {
      group: Prisma.$GroupPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      genres: string[]
      type: $Enums.MediaType
      platforms: string[]
      groupId: string
    }, ExtArgs["result"]["groupSuggestion"]>
    composites: {}
  }

  type GroupSuggestionGetPayload<S extends boolean | null | undefined | GroupSuggestionDefaultArgs> = $Result.GetResult<Prisma.$GroupSuggestionPayload, S>

  type GroupSuggestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GroupSuggestionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GroupSuggestionCountAggregateInputType | true
    }

  export interface GroupSuggestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GroupSuggestion'], meta: { name: 'GroupSuggestion' } }
    /**
     * Find zero or one GroupSuggestion that matches the filter.
     * @param {GroupSuggestionFindUniqueArgs} args - Arguments to find a GroupSuggestion
     * @example
     * // Get one GroupSuggestion
     * const groupSuggestion = await prisma.groupSuggestion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GroupSuggestionFindUniqueArgs>(args: SelectSubset<T, GroupSuggestionFindUniqueArgs<ExtArgs>>): Prisma__GroupSuggestionClient<$Result.GetResult<Prisma.$GroupSuggestionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GroupSuggestion that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GroupSuggestionFindUniqueOrThrowArgs} args - Arguments to find a GroupSuggestion
     * @example
     * // Get one GroupSuggestion
     * const groupSuggestion = await prisma.groupSuggestion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GroupSuggestionFindUniqueOrThrowArgs>(args: SelectSubset<T, GroupSuggestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GroupSuggestionClient<$Result.GetResult<Prisma.$GroupSuggestionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GroupSuggestion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupSuggestionFindFirstArgs} args - Arguments to find a GroupSuggestion
     * @example
     * // Get one GroupSuggestion
     * const groupSuggestion = await prisma.groupSuggestion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GroupSuggestionFindFirstArgs>(args?: SelectSubset<T, GroupSuggestionFindFirstArgs<ExtArgs>>): Prisma__GroupSuggestionClient<$Result.GetResult<Prisma.$GroupSuggestionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GroupSuggestion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupSuggestionFindFirstOrThrowArgs} args - Arguments to find a GroupSuggestion
     * @example
     * // Get one GroupSuggestion
     * const groupSuggestion = await prisma.groupSuggestion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GroupSuggestionFindFirstOrThrowArgs>(args?: SelectSubset<T, GroupSuggestionFindFirstOrThrowArgs<ExtArgs>>): Prisma__GroupSuggestionClient<$Result.GetResult<Prisma.$GroupSuggestionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GroupSuggestions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupSuggestionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GroupSuggestions
     * const groupSuggestions = await prisma.groupSuggestion.findMany()
     * 
     * // Get first 10 GroupSuggestions
     * const groupSuggestions = await prisma.groupSuggestion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupSuggestionWithIdOnly = await prisma.groupSuggestion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GroupSuggestionFindManyArgs>(args?: SelectSubset<T, GroupSuggestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupSuggestionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GroupSuggestion.
     * @param {GroupSuggestionCreateArgs} args - Arguments to create a GroupSuggestion.
     * @example
     * // Create one GroupSuggestion
     * const GroupSuggestion = await prisma.groupSuggestion.create({
     *   data: {
     *     // ... data to create a GroupSuggestion
     *   }
     * })
     * 
     */
    create<T extends GroupSuggestionCreateArgs>(args: SelectSubset<T, GroupSuggestionCreateArgs<ExtArgs>>): Prisma__GroupSuggestionClient<$Result.GetResult<Prisma.$GroupSuggestionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GroupSuggestions.
     * @param {GroupSuggestionCreateManyArgs} args - Arguments to create many GroupSuggestions.
     * @example
     * // Create many GroupSuggestions
     * const groupSuggestion = await prisma.groupSuggestion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GroupSuggestionCreateManyArgs>(args?: SelectSubset<T, GroupSuggestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GroupSuggestion.
     * @param {GroupSuggestionDeleteArgs} args - Arguments to delete one GroupSuggestion.
     * @example
     * // Delete one GroupSuggestion
     * const GroupSuggestion = await prisma.groupSuggestion.delete({
     *   where: {
     *     // ... filter to delete one GroupSuggestion
     *   }
     * })
     * 
     */
    delete<T extends GroupSuggestionDeleteArgs>(args: SelectSubset<T, GroupSuggestionDeleteArgs<ExtArgs>>): Prisma__GroupSuggestionClient<$Result.GetResult<Prisma.$GroupSuggestionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GroupSuggestion.
     * @param {GroupSuggestionUpdateArgs} args - Arguments to update one GroupSuggestion.
     * @example
     * // Update one GroupSuggestion
     * const groupSuggestion = await prisma.groupSuggestion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GroupSuggestionUpdateArgs>(args: SelectSubset<T, GroupSuggestionUpdateArgs<ExtArgs>>): Prisma__GroupSuggestionClient<$Result.GetResult<Prisma.$GroupSuggestionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GroupSuggestions.
     * @param {GroupSuggestionDeleteManyArgs} args - Arguments to filter GroupSuggestions to delete.
     * @example
     * // Delete a few GroupSuggestions
     * const { count } = await prisma.groupSuggestion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GroupSuggestionDeleteManyArgs>(args?: SelectSubset<T, GroupSuggestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GroupSuggestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupSuggestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GroupSuggestions
     * const groupSuggestion = await prisma.groupSuggestion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GroupSuggestionUpdateManyArgs>(args: SelectSubset<T, GroupSuggestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GroupSuggestion.
     * @param {GroupSuggestionUpsertArgs} args - Arguments to update or create a GroupSuggestion.
     * @example
     * // Update or create a GroupSuggestion
     * const groupSuggestion = await prisma.groupSuggestion.upsert({
     *   create: {
     *     // ... data to create a GroupSuggestion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GroupSuggestion we want to update
     *   }
     * })
     */
    upsert<T extends GroupSuggestionUpsertArgs>(args: SelectSubset<T, GroupSuggestionUpsertArgs<ExtArgs>>): Prisma__GroupSuggestionClient<$Result.GetResult<Prisma.$GroupSuggestionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more GroupSuggestions that matches the filter.
     * @param {GroupSuggestionFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const groupSuggestion = await prisma.groupSuggestion.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: GroupSuggestionFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a GroupSuggestion.
     * @param {GroupSuggestionAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const groupSuggestion = await prisma.groupSuggestion.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: GroupSuggestionAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of GroupSuggestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupSuggestionCountArgs} args - Arguments to filter GroupSuggestions to count.
     * @example
     * // Count the number of GroupSuggestions
     * const count = await prisma.groupSuggestion.count({
     *   where: {
     *     // ... the filter for the GroupSuggestions we want to count
     *   }
     * })
    **/
    count<T extends GroupSuggestionCountArgs>(
      args?: Subset<T, GroupSuggestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupSuggestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GroupSuggestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupSuggestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupSuggestionAggregateArgs>(args: Subset<T, GroupSuggestionAggregateArgs>): Prisma.PrismaPromise<GetGroupSuggestionAggregateType<T>>

    /**
     * Group by GroupSuggestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupSuggestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupSuggestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupSuggestionGroupByArgs['orderBy'] }
        : { orderBy?: GroupSuggestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupSuggestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupSuggestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GroupSuggestion model
   */
  readonly fields: GroupSuggestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GroupSuggestion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GroupSuggestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    group<T extends GroupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GroupDefaultArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GroupSuggestion model
   */ 
  interface GroupSuggestionFieldRefs {
    readonly id: FieldRef<"GroupSuggestion", 'String'>
    readonly title: FieldRef<"GroupSuggestion", 'String'>
    readonly description: FieldRef<"GroupSuggestion", 'String'>
    readonly genres: FieldRef<"GroupSuggestion", 'String[]'>
    readonly type: FieldRef<"GroupSuggestion", 'MediaType'>
    readonly platforms: FieldRef<"GroupSuggestion", 'String[]'>
    readonly groupId: FieldRef<"GroupSuggestion", 'String'>
  }
    

  // Custom InputTypes
  /**
   * GroupSuggestion findUnique
   */
  export type GroupSuggestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupSuggestion
     */
    select?: GroupSuggestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupSuggestionInclude<ExtArgs> | null
    /**
     * Filter, which GroupSuggestion to fetch.
     */
    where: GroupSuggestionWhereUniqueInput
  }

  /**
   * GroupSuggestion findUniqueOrThrow
   */
  export type GroupSuggestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupSuggestion
     */
    select?: GroupSuggestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupSuggestionInclude<ExtArgs> | null
    /**
     * Filter, which GroupSuggestion to fetch.
     */
    where: GroupSuggestionWhereUniqueInput
  }

  /**
   * GroupSuggestion findFirst
   */
  export type GroupSuggestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupSuggestion
     */
    select?: GroupSuggestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupSuggestionInclude<ExtArgs> | null
    /**
     * Filter, which GroupSuggestion to fetch.
     */
    where?: GroupSuggestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupSuggestions to fetch.
     */
    orderBy?: GroupSuggestionOrderByWithRelationInput | GroupSuggestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupSuggestions.
     */
    cursor?: GroupSuggestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupSuggestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupSuggestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupSuggestions.
     */
    distinct?: GroupSuggestionScalarFieldEnum | GroupSuggestionScalarFieldEnum[]
  }

  /**
   * GroupSuggestion findFirstOrThrow
   */
  export type GroupSuggestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupSuggestion
     */
    select?: GroupSuggestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupSuggestionInclude<ExtArgs> | null
    /**
     * Filter, which GroupSuggestion to fetch.
     */
    where?: GroupSuggestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupSuggestions to fetch.
     */
    orderBy?: GroupSuggestionOrderByWithRelationInput | GroupSuggestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupSuggestions.
     */
    cursor?: GroupSuggestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupSuggestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupSuggestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupSuggestions.
     */
    distinct?: GroupSuggestionScalarFieldEnum | GroupSuggestionScalarFieldEnum[]
  }

  /**
   * GroupSuggestion findMany
   */
  export type GroupSuggestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupSuggestion
     */
    select?: GroupSuggestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupSuggestionInclude<ExtArgs> | null
    /**
     * Filter, which GroupSuggestions to fetch.
     */
    where?: GroupSuggestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupSuggestions to fetch.
     */
    orderBy?: GroupSuggestionOrderByWithRelationInput | GroupSuggestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GroupSuggestions.
     */
    cursor?: GroupSuggestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupSuggestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupSuggestions.
     */
    skip?: number
    distinct?: GroupSuggestionScalarFieldEnum | GroupSuggestionScalarFieldEnum[]
  }

  /**
   * GroupSuggestion create
   */
  export type GroupSuggestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupSuggestion
     */
    select?: GroupSuggestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupSuggestionInclude<ExtArgs> | null
    /**
     * The data needed to create a GroupSuggestion.
     */
    data: XOR<GroupSuggestionCreateInput, GroupSuggestionUncheckedCreateInput>
  }

  /**
   * GroupSuggestion createMany
   */
  export type GroupSuggestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GroupSuggestions.
     */
    data: GroupSuggestionCreateManyInput | GroupSuggestionCreateManyInput[]
  }

  /**
   * GroupSuggestion update
   */
  export type GroupSuggestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupSuggestion
     */
    select?: GroupSuggestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupSuggestionInclude<ExtArgs> | null
    /**
     * The data needed to update a GroupSuggestion.
     */
    data: XOR<GroupSuggestionUpdateInput, GroupSuggestionUncheckedUpdateInput>
    /**
     * Choose, which GroupSuggestion to update.
     */
    where: GroupSuggestionWhereUniqueInput
  }

  /**
   * GroupSuggestion updateMany
   */
  export type GroupSuggestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GroupSuggestions.
     */
    data: XOR<GroupSuggestionUpdateManyMutationInput, GroupSuggestionUncheckedUpdateManyInput>
    /**
     * Filter which GroupSuggestions to update
     */
    where?: GroupSuggestionWhereInput
  }

  /**
   * GroupSuggestion upsert
   */
  export type GroupSuggestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupSuggestion
     */
    select?: GroupSuggestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupSuggestionInclude<ExtArgs> | null
    /**
     * The filter to search for the GroupSuggestion to update in case it exists.
     */
    where: GroupSuggestionWhereUniqueInput
    /**
     * In case the GroupSuggestion found by the `where` argument doesn't exist, create a new GroupSuggestion with this data.
     */
    create: XOR<GroupSuggestionCreateInput, GroupSuggestionUncheckedCreateInput>
    /**
     * In case the GroupSuggestion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GroupSuggestionUpdateInput, GroupSuggestionUncheckedUpdateInput>
  }

  /**
   * GroupSuggestion delete
   */
  export type GroupSuggestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupSuggestion
     */
    select?: GroupSuggestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupSuggestionInclude<ExtArgs> | null
    /**
     * Filter which GroupSuggestion to delete.
     */
    where: GroupSuggestionWhereUniqueInput
  }

  /**
   * GroupSuggestion deleteMany
   */
  export type GroupSuggestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GroupSuggestions to delete
     */
    where?: GroupSuggestionWhereInput
  }

  /**
   * GroupSuggestion findRaw
   */
  export type GroupSuggestionFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * GroupSuggestion aggregateRaw
   */
  export type GroupSuggestionAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * GroupSuggestion without action
   */
  export type GroupSuggestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupSuggestion
     */
    select?: GroupSuggestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupSuggestionInclude<ExtArgs> | null
  }


  /**
   * Model UserSuggestion
   */

  export type AggregateUserSuggestion = {
    _count: UserSuggestionCountAggregateOutputType | null
    _min: UserSuggestionMinAggregateOutputType | null
    _max: UserSuggestionMaxAggregateOutputType | null
  }

  export type UserSuggestionMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    type: $Enums.MediaType | null
    authorId: string | null
  }

  export type UserSuggestionMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    type: $Enums.MediaType | null
    authorId: string | null
  }

  export type UserSuggestionCountAggregateOutputType = {
    id: number
    title: number
    description: number
    genres: number
    type: number
    platforms: number
    authorId: number
    _all: number
  }


  export type UserSuggestionMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    authorId?: true
  }

  export type UserSuggestionMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    authorId?: true
  }

  export type UserSuggestionCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    genres?: true
    type?: true
    platforms?: true
    authorId?: true
    _all?: true
  }

  export type UserSuggestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSuggestion to aggregate.
     */
    where?: UserSuggestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSuggestions to fetch.
     */
    orderBy?: UserSuggestionOrderByWithRelationInput | UserSuggestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSuggestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSuggestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSuggestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSuggestions
    **/
    _count?: true | UserSuggestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSuggestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSuggestionMaxAggregateInputType
  }

  export type GetUserSuggestionAggregateType<T extends UserSuggestionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSuggestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSuggestion[P]>
      : GetScalarType<T[P], AggregateUserSuggestion[P]>
  }




  export type UserSuggestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSuggestionWhereInput
    orderBy?: UserSuggestionOrderByWithAggregationInput | UserSuggestionOrderByWithAggregationInput[]
    by: UserSuggestionScalarFieldEnum[] | UserSuggestionScalarFieldEnum
    having?: UserSuggestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSuggestionCountAggregateInputType | true
    _min?: UserSuggestionMinAggregateInputType
    _max?: UserSuggestionMaxAggregateInputType
  }

  export type UserSuggestionGroupByOutputType = {
    id: string
    title: string
    description: string
    genres: string[]
    type: $Enums.MediaType
    platforms: string[]
    authorId: string
    _count: UserSuggestionCountAggregateOutputType | null
    _min: UserSuggestionMinAggregateOutputType | null
    _max: UserSuggestionMaxAggregateOutputType | null
  }

  type GetUserSuggestionGroupByPayload<T extends UserSuggestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserSuggestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSuggestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSuggestionGroupByOutputType[P]>
            : GetScalarType<T[P], UserSuggestionGroupByOutputType[P]>
        }
      >
    >


  export type UserSuggestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    genres?: boolean
    type?: boolean
    platforms?: boolean
    authorId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSuggestion"]>


  export type UserSuggestionSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    genres?: boolean
    type?: boolean
    platforms?: boolean
    authorId?: boolean
  }

  export type UserSuggestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserSuggestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserSuggestion"
    objects: {
      author: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      genres: string[]
      type: $Enums.MediaType
      platforms: string[]
      authorId: string
    }, ExtArgs["result"]["userSuggestion"]>
    composites: {}
  }

  type UserSuggestionGetPayload<S extends boolean | null | undefined | UserSuggestionDefaultArgs> = $Result.GetResult<Prisma.$UserSuggestionPayload, S>

  type UserSuggestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserSuggestionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserSuggestionCountAggregateInputType | true
    }

  export interface UserSuggestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSuggestion'], meta: { name: 'UserSuggestion' } }
    /**
     * Find zero or one UserSuggestion that matches the filter.
     * @param {UserSuggestionFindUniqueArgs} args - Arguments to find a UserSuggestion
     * @example
     * // Get one UserSuggestion
     * const userSuggestion = await prisma.userSuggestion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserSuggestionFindUniqueArgs>(args: SelectSubset<T, UserSuggestionFindUniqueArgs<ExtArgs>>): Prisma__UserSuggestionClient<$Result.GetResult<Prisma.$UserSuggestionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserSuggestion that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserSuggestionFindUniqueOrThrowArgs} args - Arguments to find a UserSuggestion
     * @example
     * // Get one UserSuggestion
     * const userSuggestion = await prisma.userSuggestion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserSuggestionFindUniqueOrThrowArgs>(args: SelectSubset<T, UserSuggestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserSuggestionClient<$Result.GetResult<Prisma.$UserSuggestionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserSuggestion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSuggestionFindFirstArgs} args - Arguments to find a UserSuggestion
     * @example
     * // Get one UserSuggestion
     * const userSuggestion = await prisma.userSuggestion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserSuggestionFindFirstArgs>(args?: SelectSubset<T, UserSuggestionFindFirstArgs<ExtArgs>>): Prisma__UserSuggestionClient<$Result.GetResult<Prisma.$UserSuggestionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserSuggestion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSuggestionFindFirstOrThrowArgs} args - Arguments to find a UserSuggestion
     * @example
     * // Get one UserSuggestion
     * const userSuggestion = await prisma.userSuggestion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserSuggestionFindFirstOrThrowArgs>(args?: SelectSubset<T, UserSuggestionFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserSuggestionClient<$Result.GetResult<Prisma.$UserSuggestionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserSuggestions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSuggestionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSuggestions
     * const userSuggestions = await prisma.userSuggestion.findMany()
     * 
     * // Get first 10 UserSuggestions
     * const userSuggestions = await prisma.userSuggestion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userSuggestionWithIdOnly = await prisma.userSuggestion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserSuggestionFindManyArgs>(args?: SelectSubset<T, UserSuggestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSuggestionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserSuggestion.
     * @param {UserSuggestionCreateArgs} args - Arguments to create a UserSuggestion.
     * @example
     * // Create one UserSuggestion
     * const UserSuggestion = await prisma.userSuggestion.create({
     *   data: {
     *     // ... data to create a UserSuggestion
     *   }
     * })
     * 
     */
    create<T extends UserSuggestionCreateArgs>(args: SelectSubset<T, UserSuggestionCreateArgs<ExtArgs>>): Prisma__UserSuggestionClient<$Result.GetResult<Prisma.$UserSuggestionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserSuggestions.
     * @param {UserSuggestionCreateManyArgs} args - Arguments to create many UserSuggestions.
     * @example
     * // Create many UserSuggestions
     * const userSuggestion = await prisma.userSuggestion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserSuggestionCreateManyArgs>(args?: SelectSubset<T, UserSuggestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserSuggestion.
     * @param {UserSuggestionDeleteArgs} args - Arguments to delete one UserSuggestion.
     * @example
     * // Delete one UserSuggestion
     * const UserSuggestion = await prisma.userSuggestion.delete({
     *   where: {
     *     // ... filter to delete one UserSuggestion
     *   }
     * })
     * 
     */
    delete<T extends UserSuggestionDeleteArgs>(args: SelectSubset<T, UserSuggestionDeleteArgs<ExtArgs>>): Prisma__UserSuggestionClient<$Result.GetResult<Prisma.$UserSuggestionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserSuggestion.
     * @param {UserSuggestionUpdateArgs} args - Arguments to update one UserSuggestion.
     * @example
     * // Update one UserSuggestion
     * const userSuggestion = await prisma.userSuggestion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserSuggestionUpdateArgs>(args: SelectSubset<T, UserSuggestionUpdateArgs<ExtArgs>>): Prisma__UserSuggestionClient<$Result.GetResult<Prisma.$UserSuggestionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserSuggestions.
     * @param {UserSuggestionDeleteManyArgs} args - Arguments to filter UserSuggestions to delete.
     * @example
     * // Delete a few UserSuggestions
     * const { count } = await prisma.userSuggestion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserSuggestionDeleteManyArgs>(args?: SelectSubset<T, UserSuggestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSuggestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSuggestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSuggestions
     * const userSuggestion = await prisma.userSuggestion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserSuggestionUpdateManyArgs>(args: SelectSubset<T, UserSuggestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserSuggestion.
     * @param {UserSuggestionUpsertArgs} args - Arguments to update or create a UserSuggestion.
     * @example
     * // Update or create a UserSuggestion
     * const userSuggestion = await prisma.userSuggestion.upsert({
     *   create: {
     *     // ... data to create a UserSuggestion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSuggestion we want to update
     *   }
     * })
     */
    upsert<T extends UserSuggestionUpsertArgs>(args: SelectSubset<T, UserSuggestionUpsertArgs<ExtArgs>>): Prisma__UserSuggestionClient<$Result.GetResult<Prisma.$UserSuggestionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more UserSuggestions that matches the filter.
     * @param {UserSuggestionFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const userSuggestion = await prisma.userSuggestion.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: UserSuggestionFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a UserSuggestion.
     * @param {UserSuggestionAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const userSuggestion = await prisma.userSuggestion.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: UserSuggestionAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of UserSuggestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSuggestionCountArgs} args - Arguments to filter UserSuggestions to count.
     * @example
     * // Count the number of UserSuggestions
     * const count = await prisma.userSuggestion.count({
     *   where: {
     *     // ... the filter for the UserSuggestions we want to count
     *   }
     * })
    **/
    count<T extends UserSuggestionCountArgs>(
      args?: Subset<T, UserSuggestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSuggestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSuggestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSuggestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSuggestionAggregateArgs>(args: Subset<T, UserSuggestionAggregateArgs>): Prisma.PrismaPromise<GetUserSuggestionAggregateType<T>>

    /**
     * Group by UserSuggestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSuggestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSuggestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSuggestionGroupByArgs['orderBy'] }
        : { orderBy?: UserSuggestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSuggestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSuggestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserSuggestion model
   */
  readonly fields: UserSuggestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSuggestion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserSuggestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserSuggestion model
   */ 
  interface UserSuggestionFieldRefs {
    readonly id: FieldRef<"UserSuggestion", 'String'>
    readonly title: FieldRef<"UserSuggestion", 'String'>
    readonly description: FieldRef<"UserSuggestion", 'String'>
    readonly genres: FieldRef<"UserSuggestion", 'String[]'>
    readonly type: FieldRef<"UserSuggestion", 'MediaType'>
    readonly platforms: FieldRef<"UserSuggestion", 'String[]'>
    readonly authorId: FieldRef<"UserSuggestion", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserSuggestion findUnique
   */
  export type UserSuggestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSuggestion
     */
    select?: UserSuggestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSuggestionInclude<ExtArgs> | null
    /**
     * Filter, which UserSuggestion to fetch.
     */
    where: UserSuggestionWhereUniqueInput
  }

  /**
   * UserSuggestion findUniqueOrThrow
   */
  export type UserSuggestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSuggestion
     */
    select?: UserSuggestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSuggestionInclude<ExtArgs> | null
    /**
     * Filter, which UserSuggestion to fetch.
     */
    where: UserSuggestionWhereUniqueInput
  }

  /**
   * UserSuggestion findFirst
   */
  export type UserSuggestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSuggestion
     */
    select?: UserSuggestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSuggestionInclude<ExtArgs> | null
    /**
     * Filter, which UserSuggestion to fetch.
     */
    where?: UserSuggestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSuggestions to fetch.
     */
    orderBy?: UserSuggestionOrderByWithRelationInput | UserSuggestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSuggestions.
     */
    cursor?: UserSuggestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSuggestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSuggestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSuggestions.
     */
    distinct?: UserSuggestionScalarFieldEnum | UserSuggestionScalarFieldEnum[]
  }

  /**
   * UserSuggestion findFirstOrThrow
   */
  export type UserSuggestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSuggestion
     */
    select?: UserSuggestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSuggestionInclude<ExtArgs> | null
    /**
     * Filter, which UserSuggestion to fetch.
     */
    where?: UserSuggestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSuggestions to fetch.
     */
    orderBy?: UserSuggestionOrderByWithRelationInput | UserSuggestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSuggestions.
     */
    cursor?: UserSuggestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSuggestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSuggestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSuggestions.
     */
    distinct?: UserSuggestionScalarFieldEnum | UserSuggestionScalarFieldEnum[]
  }

  /**
   * UserSuggestion findMany
   */
  export type UserSuggestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSuggestion
     */
    select?: UserSuggestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSuggestionInclude<ExtArgs> | null
    /**
     * Filter, which UserSuggestions to fetch.
     */
    where?: UserSuggestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSuggestions to fetch.
     */
    orderBy?: UserSuggestionOrderByWithRelationInput | UserSuggestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSuggestions.
     */
    cursor?: UserSuggestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSuggestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSuggestions.
     */
    skip?: number
    distinct?: UserSuggestionScalarFieldEnum | UserSuggestionScalarFieldEnum[]
  }

  /**
   * UserSuggestion create
   */
  export type UserSuggestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSuggestion
     */
    select?: UserSuggestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSuggestionInclude<ExtArgs> | null
    /**
     * The data needed to create a UserSuggestion.
     */
    data: XOR<UserSuggestionCreateInput, UserSuggestionUncheckedCreateInput>
  }

  /**
   * UserSuggestion createMany
   */
  export type UserSuggestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserSuggestions.
     */
    data: UserSuggestionCreateManyInput | UserSuggestionCreateManyInput[]
  }

  /**
   * UserSuggestion update
   */
  export type UserSuggestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSuggestion
     */
    select?: UserSuggestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSuggestionInclude<ExtArgs> | null
    /**
     * The data needed to update a UserSuggestion.
     */
    data: XOR<UserSuggestionUpdateInput, UserSuggestionUncheckedUpdateInput>
    /**
     * Choose, which UserSuggestion to update.
     */
    where: UserSuggestionWhereUniqueInput
  }

  /**
   * UserSuggestion updateMany
   */
  export type UserSuggestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserSuggestions.
     */
    data: XOR<UserSuggestionUpdateManyMutationInput, UserSuggestionUncheckedUpdateManyInput>
    /**
     * Filter which UserSuggestions to update
     */
    where?: UserSuggestionWhereInput
  }

  /**
   * UserSuggestion upsert
   */
  export type UserSuggestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSuggestion
     */
    select?: UserSuggestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSuggestionInclude<ExtArgs> | null
    /**
     * The filter to search for the UserSuggestion to update in case it exists.
     */
    where: UserSuggestionWhereUniqueInput
    /**
     * In case the UserSuggestion found by the `where` argument doesn't exist, create a new UserSuggestion with this data.
     */
    create: XOR<UserSuggestionCreateInput, UserSuggestionUncheckedCreateInput>
    /**
     * In case the UserSuggestion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSuggestionUpdateInput, UserSuggestionUncheckedUpdateInput>
  }

  /**
   * UserSuggestion delete
   */
  export type UserSuggestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSuggestion
     */
    select?: UserSuggestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSuggestionInclude<ExtArgs> | null
    /**
     * Filter which UserSuggestion to delete.
     */
    where: UserSuggestionWhereUniqueInput
  }

  /**
   * UserSuggestion deleteMany
   */
  export type UserSuggestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSuggestions to delete
     */
    where?: UserSuggestionWhereInput
  }

  /**
   * UserSuggestion findRaw
   */
  export type UserSuggestionFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * UserSuggestion aggregateRaw
   */
  export type UserSuggestionAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * UserSuggestion without action
   */
  export type UserSuggestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSuggestion
     */
    select?: UserSuggestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSuggestionInclude<ExtArgs> | null
  }


  /**
   * Model Media
   */

  export type AggregateMedia = {
    _count: MediaCountAggregateOutputType | null
    _min: MediaMinAggregateOutputType | null
    _max: MediaMaxAggregateOutputType | null
  }

  export type MediaMinAggregateOutputType = {
    id: string | null
    name: string | null
    producer: string | null
    type: $Enums.MediaType | null
  }

  export type MediaMaxAggregateOutputType = {
    id: string | null
    name: string | null
    producer: string | null
    type: $Enums.MediaType | null
  }

  export type MediaCountAggregateOutputType = {
    id: number
    name: number
    producer: number
    type: number
    _all: number
  }


  export type MediaMinAggregateInputType = {
    id?: true
    name?: true
    producer?: true
    type?: true
  }

  export type MediaMaxAggregateInputType = {
    id?: true
    name?: true
    producer?: true
    type?: true
  }

  export type MediaCountAggregateInputType = {
    id?: true
    name?: true
    producer?: true
    type?: true
    _all?: true
  }

  export type MediaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Media to aggregate.
     */
    where?: MediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Media to fetch.
     */
    orderBy?: MediaOrderByWithRelationInput | MediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Media from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Media.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Media
    **/
    _count?: true | MediaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MediaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MediaMaxAggregateInputType
  }

  export type GetMediaAggregateType<T extends MediaAggregateArgs> = {
        [P in keyof T & keyof AggregateMedia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedia[P]>
      : GetScalarType<T[P], AggregateMedia[P]>
  }




  export type MediaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MediaWhereInput
    orderBy?: MediaOrderByWithAggregationInput | MediaOrderByWithAggregationInput[]
    by: MediaScalarFieldEnum[] | MediaScalarFieldEnum
    having?: MediaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MediaCountAggregateInputType | true
    _min?: MediaMinAggregateInputType
    _max?: MediaMaxAggregateInputType
  }

  export type MediaGroupByOutputType = {
    id: string
    name: string
    producer: string
    type: $Enums.MediaType
    _count: MediaCountAggregateOutputType | null
    _min: MediaMinAggregateOutputType | null
    _max: MediaMaxAggregateOutputType | null
  }

  type GetMediaGroupByPayload<T extends MediaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MediaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MediaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MediaGroupByOutputType[P]>
            : GetScalarType<T[P], MediaGroupByOutputType[P]>
        }
      >
    >


  export type MediaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    producer?: boolean
    type?: boolean
  }, ExtArgs["result"]["media"]>


  export type MediaSelectScalar = {
    id?: boolean
    name?: boolean
    producer?: boolean
    type?: boolean
  }

  export type MediaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MediaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Media"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      producer: string
      type: $Enums.MediaType
    }, ExtArgs["result"]["media"]>
    composites: {}
  }

  type MediaGetPayload<S extends boolean | null | undefined | MediaDefaultArgs> = $Result.GetResult<Prisma.$MediaPayload, S>

  type MediaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MediaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MediaCountAggregateInputType | true
    }

  export interface MediaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Media'], meta: { name: 'Media' } }
    /**
     * Find zero or one Media that matches the filter.
     * @param {MediaFindUniqueArgs} args - Arguments to find a Media
     * @example
     * // Get one Media
     * const media = await prisma.media.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MediaFindUniqueArgs>(args: SelectSubset<T, MediaFindUniqueArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Media that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MediaFindUniqueOrThrowArgs} args - Arguments to find a Media
     * @example
     * // Get one Media
     * const media = await prisma.media.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MediaFindUniqueOrThrowArgs>(args: SelectSubset<T, MediaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Media that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaFindFirstArgs} args - Arguments to find a Media
     * @example
     * // Get one Media
     * const media = await prisma.media.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MediaFindFirstArgs>(args?: SelectSubset<T, MediaFindFirstArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Media that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaFindFirstOrThrowArgs} args - Arguments to find a Media
     * @example
     * // Get one Media
     * const media = await prisma.media.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MediaFindFirstOrThrowArgs>(args?: SelectSubset<T, MediaFindFirstOrThrowArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Media that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Media
     * const media = await prisma.media.findMany()
     * 
     * // Get first 10 Media
     * const media = await prisma.media.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mediaWithIdOnly = await prisma.media.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MediaFindManyArgs>(args?: SelectSubset<T, MediaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Media.
     * @param {MediaCreateArgs} args - Arguments to create a Media.
     * @example
     * // Create one Media
     * const Media = await prisma.media.create({
     *   data: {
     *     // ... data to create a Media
     *   }
     * })
     * 
     */
    create<T extends MediaCreateArgs>(args: SelectSubset<T, MediaCreateArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Media.
     * @param {MediaCreateManyArgs} args - Arguments to create many Media.
     * @example
     * // Create many Media
     * const media = await prisma.media.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MediaCreateManyArgs>(args?: SelectSubset<T, MediaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Media.
     * @param {MediaDeleteArgs} args - Arguments to delete one Media.
     * @example
     * // Delete one Media
     * const Media = await prisma.media.delete({
     *   where: {
     *     // ... filter to delete one Media
     *   }
     * })
     * 
     */
    delete<T extends MediaDeleteArgs>(args: SelectSubset<T, MediaDeleteArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Media.
     * @param {MediaUpdateArgs} args - Arguments to update one Media.
     * @example
     * // Update one Media
     * const media = await prisma.media.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MediaUpdateArgs>(args: SelectSubset<T, MediaUpdateArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Media.
     * @param {MediaDeleteManyArgs} args - Arguments to filter Media to delete.
     * @example
     * // Delete a few Media
     * const { count } = await prisma.media.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MediaDeleteManyArgs>(args?: SelectSubset<T, MediaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Media.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Media
     * const media = await prisma.media.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MediaUpdateManyArgs>(args: SelectSubset<T, MediaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Media.
     * @param {MediaUpsertArgs} args - Arguments to update or create a Media.
     * @example
     * // Update or create a Media
     * const media = await prisma.media.upsert({
     *   create: {
     *     // ... data to create a Media
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Media we want to update
     *   }
     * })
     */
    upsert<T extends MediaUpsertArgs>(args: SelectSubset<T, MediaUpsertArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Media that matches the filter.
     * @param {MediaFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const media = await prisma.media.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: MediaFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Media.
     * @param {MediaAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const media = await prisma.media.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: MediaAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Media.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaCountArgs} args - Arguments to filter Media to count.
     * @example
     * // Count the number of Media
     * const count = await prisma.media.count({
     *   where: {
     *     // ... the filter for the Media we want to count
     *   }
     * })
    **/
    count<T extends MediaCountArgs>(
      args?: Subset<T, MediaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MediaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Media.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MediaAggregateArgs>(args: Subset<T, MediaAggregateArgs>): Prisma.PrismaPromise<GetMediaAggregateType<T>>

    /**
     * Group by Media.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MediaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MediaGroupByArgs['orderBy'] }
        : { orderBy?: MediaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MediaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMediaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Media model
   */
  readonly fields: MediaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Media.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MediaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Media model
   */ 
  interface MediaFieldRefs {
    readonly id: FieldRef<"Media", 'String'>
    readonly name: FieldRef<"Media", 'String'>
    readonly producer: FieldRef<"Media", 'String'>
    readonly type: FieldRef<"Media", 'MediaType'>
  }
    

  // Custom InputTypes
  /**
   * Media findUnique
   */
  export type MediaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Filter, which Media to fetch.
     */
    where: MediaWhereUniqueInput
  }

  /**
   * Media findUniqueOrThrow
   */
  export type MediaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Filter, which Media to fetch.
     */
    where: MediaWhereUniqueInput
  }

  /**
   * Media findFirst
   */
  export type MediaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Filter, which Media to fetch.
     */
    where?: MediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Media to fetch.
     */
    orderBy?: MediaOrderByWithRelationInput | MediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Media.
     */
    cursor?: MediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Media from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Media.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Media.
     */
    distinct?: MediaScalarFieldEnum | MediaScalarFieldEnum[]
  }

  /**
   * Media findFirstOrThrow
   */
  export type MediaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Filter, which Media to fetch.
     */
    where?: MediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Media to fetch.
     */
    orderBy?: MediaOrderByWithRelationInput | MediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Media.
     */
    cursor?: MediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Media from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Media.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Media.
     */
    distinct?: MediaScalarFieldEnum | MediaScalarFieldEnum[]
  }

  /**
   * Media findMany
   */
  export type MediaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Filter, which Media to fetch.
     */
    where?: MediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Media to fetch.
     */
    orderBy?: MediaOrderByWithRelationInput | MediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Media.
     */
    cursor?: MediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Media from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Media.
     */
    skip?: number
    distinct?: MediaScalarFieldEnum | MediaScalarFieldEnum[]
  }

  /**
   * Media create
   */
  export type MediaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * The data needed to create a Media.
     */
    data: XOR<MediaCreateInput, MediaUncheckedCreateInput>
  }

  /**
   * Media createMany
   */
  export type MediaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Media.
     */
    data: MediaCreateManyInput | MediaCreateManyInput[]
  }

  /**
   * Media update
   */
  export type MediaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * The data needed to update a Media.
     */
    data: XOR<MediaUpdateInput, MediaUncheckedUpdateInput>
    /**
     * Choose, which Media to update.
     */
    where: MediaWhereUniqueInput
  }

  /**
   * Media updateMany
   */
  export type MediaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Media.
     */
    data: XOR<MediaUpdateManyMutationInput, MediaUncheckedUpdateManyInput>
    /**
     * Filter which Media to update
     */
    where?: MediaWhereInput
  }

  /**
   * Media upsert
   */
  export type MediaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * The filter to search for the Media to update in case it exists.
     */
    where: MediaWhereUniqueInput
    /**
     * In case the Media found by the `where` argument doesn't exist, create a new Media with this data.
     */
    create: XOR<MediaCreateInput, MediaUncheckedCreateInput>
    /**
     * In case the Media was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MediaUpdateInput, MediaUncheckedUpdateInput>
  }

  /**
   * Media delete
   */
  export type MediaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Filter which Media to delete.
     */
    where: MediaWhereUniqueInput
  }

  /**
   * Media deleteMany
   */
  export type MediaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Media to delete
     */
    where?: MediaWhereInput
  }

  /**
   * Media findRaw
   */
  export type MediaFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Media aggregateRaw
   */
  export type MediaAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Media without action
   */
  export type MediaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
  }


  /**
   * Model Group
   */

  export type AggregateGroup = {
    _count: GroupCountAggregateOutputType | null
    _avg: GroupAvgAggregateOutputType | null
    _sum: GroupSumAggregateOutputType | null
    _min: GroupMinAggregateOutputType | null
    _max: GroupMaxAggregateOutputType | null
  }

  export type GroupAvgAggregateOutputType = {
    minAge: number | null
    maxAge: number | null
  }

  export type GroupSumAggregateOutputType = {
    minAge: number | null
    maxAge: number | null
  }

  export type GroupMinAggregateOutputType = {
    id: string | null
    name: string | null
    minAge: number | null
    maxAge: number | null
    ownerId: string | null
  }

  export type GroupMaxAggregateOutputType = {
    id: string | null
    name: string | null
    minAge: number | null
    maxAge: number | null
    ownerId: string | null
  }

  export type GroupCountAggregateOutputType = {
    id: number
    name: number
    minAge: number
    maxAge: number
    genres: number
    image: number
    likes: number
    dislikes: number
    usersId: number
    ownerId: number
    _all: number
  }


  export type GroupAvgAggregateInputType = {
    minAge?: true
    maxAge?: true
  }

  export type GroupSumAggregateInputType = {
    minAge?: true
    maxAge?: true
  }

  export type GroupMinAggregateInputType = {
    id?: true
    name?: true
    minAge?: true
    maxAge?: true
    ownerId?: true
  }

  export type GroupMaxAggregateInputType = {
    id?: true
    name?: true
    minAge?: true
    maxAge?: true
    ownerId?: true
  }

  export type GroupCountAggregateInputType = {
    id?: true
    name?: true
    minAge?: true
    maxAge?: true
    genres?: true
    image?: true
    likes?: true
    dislikes?: true
    usersId?: true
    ownerId?: true
    _all?: true
  }

  export type GroupAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Group to aggregate.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Groups
    **/
    _count?: true | GroupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GroupAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GroupSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupMaxAggregateInputType
  }

  export type GetGroupAggregateType<T extends GroupAggregateArgs> = {
        [P in keyof T & keyof AggregateGroup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroup[P]>
      : GetScalarType<T[P], AggregateGroup[P]>
  }




  export type GroupGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupWhereInput
    orderBy?: GroupOrderByWithAggregationInput | GroupOrderByWithAggregationInput[]
    by: GroupScalarFieldEnum[] | GroupScalarFieldEnum
    having?: GroupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupCountAggregateInputType | true
    _avg?: GroupAvgAggregateInputType
    _sum?: GroupSumAggregateInputType
    _min?: GroupMinAggregateInputType
    _max?: GroupMaxAggregateInputType
  }

  export type GroupGroupByOutputType = {
    id: string
    name: string
    minAge: number
    maxAge: number
    genres: string[]
    image: JsonValue | null
    likes: string[]
    dislikes: string[]
    usersId: string[]
    ownerId: string
    _count: GroupCountAggregateOutputType | null
    _avg: GroupAvgAggregateOutputType | null
    _sum: GroupSumAggregateOutputType | null
    _min: GroupMinAggregateOutputType | null
    _max: GroupMaxAggregateOutputType | null
  }

  type GetGroupGroupByPayload<T extends GroupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GroupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupGroupByOutputType[P]>
            : GetScalarType<T[P], GroupGroupByOutputType[P]>
        }
      >
    >


  export type GroupSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    minAge?: boolean
    maxAge?: boolean
    genres?: boolean
    image?: boolean
    likes?: boolean
    dislikes?: boolean
    usersId?: boolean
    ownerId?: boolean
    ownedBy?: boolean | UserDefaultArgs<ExtArgs>
    users?: boolean | Group$usersArgs<ExtArgs>
    suggestions?: boolean | Group$suggestionsArgs<ExtArgs>
    _count?: boolean | GroupCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["group"]>


  export type GroupSelectScalar = {
    id?: boolean
    name?: boolean
    minAge?: boolean
    maxAge?: boolean
    genres?: boolean
    image?: boolean
    likes?: boolean
    dislikes?: boolean
    usersId?: boolean
    ownerId?: boolean
  }

  export type GroupInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ownedBy?: boolean | UserDefaultArgs<ExtArgs>
    users?: boolean | Group$usersArgs<ExtArgs>
    suggestions?: boolean | Group$suggestionsArgs<ExtArgs>
    _count?: boolean | GroupCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $GroupPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Group"
    objects: {
      ownedBy: Prisma.$UserPayload<ExtArgs>
      users: Prisma.$UserPayload<ExtArgs>[]
      suggestions: Prisma.$GroupSuggestionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      minAge: number
      maxAge: number
      genres: string[]
      image: Prisma.JsonValue | null
      likes: string[]
      dislikes: string[]
      usersId: string[]
      ownerId: string
    }, ExtArgs["result"]["group"]>
    composites: {}
  }

  type GroupGetPayload<S extends boolean | null | undefined | GroupDefaultArgs> = $Result.GetResult<Prisma.$GroupPayload, S>

  type GroupCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GroupFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GroupCountAggregateInputType | true
    }

  export interface GroupDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Group'], meta: { name: 'Group' } }
    /**
     * Find zero or one Group that matches the filter.
     * @param {GroupFindUniqueArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GroupFindUniqueArgs>(args: SelectSubset<T, GroupFindUniqueArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Group that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GroupFindUniqueOrThrowArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GroupFindUniqueOrThrowArgs>(args: SelectSubset<T, GroupFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Group that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindFirstArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GroupFindFirstArgs>(args?: SelectSubset<T, GroupFindFirstArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Group that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindFirstOrThrowArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GroupFindFirstOrThrowArgs>(args?: SelectSubset<T, GroupFindFirstOrThrowArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Groups
     * const groups = await prisma.group.findMany()
     * 
     * // Get first 10 Groups
     * const groups = await prisma.group.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupWithIdOnly = await prisma.group.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GroupFindManyArgs>(args?: SelectSubset<T, GroupFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Group.
     * @param {GroupCreateArgs} args - Arguments to create a Group.
     * @example
     * // Create one Group
     * const Group = await prisma.group.create({
     *   data: {
     *     // ... data to create a Group
     *   }
     * })
     * 
     */
    create<T extends GroupCreateArgs>(args: SelectSubset<T, GroupCreateArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Groups.
     * @param {GroupCreateManyArgs} args - Arguments to create many Groups.
     * @example
     * // Create many Groups
     * const group = await prisma.group.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GroupCreateManyArgs>(args?: SelectSubset<T, GroupCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Group.
     * @param {GroupDeleteArgs} args - Arguments to delete one Group.
     * @example
     * // Delete one Group
     * const Group = await prisma.group.delete({
     *   where: {
     *     // ... filter to delete one Group
     *   }
     * })
     * 
     */
    delete<T extends GroupDeleteArgs>(args: SelectSubset<T, GroupDeleteArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Group.
     * @param {GroupUpdateArgs} args - Arguments to update one Group.
     * @example
     * // Update one Group
     * const group = await prisma.group.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GroupUpdateArgs>(args: SelectSubset<T, GroupUpdateArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Groups.
     * @param {GroupDeleteManyArgs} args - Arguments to filter Groups to delete.
     * @example
     * // Delete a few Groups
     * const { count } = await prisma.group.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GroupDeleteManyArgs>(args?: SelectSubset<T, GroupDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Groups
     * const group = await prisma.group.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GroupUpdateManyArgs>(args: SelectSubset<T, GroupUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Group.
     * @param {GroupUpsertArgs} args - Arguments to update or create a Group.
     * @example
     * // Update or create a Group
     * const group = await prisma.group.upsert({
     *   create: {
     *     // ... data to create a Group
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Group we want to update
     *   }
     * })
     */
    upsert<T extends GroupUpsertArgs>(args: SelectSubset<T, GroupUpsertArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Groups that matches the filter.
     * @param {GroupFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const group = await prisma.group.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: GroupFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Group.
     * @param {GroupAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const group = await prisma.group.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: GroupAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupCountArgs} args - Arguments to filter Groups to count.
     * @example
     * // Count the number of Groups
     * const count = await prisma.group.count({
     *   where: {
     *     // ... the filter for the Groups we want to count
     *   }
     * })
    **/
    count<T extends GroupCountArgs>(
      args?: Subset<T, GroupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Group.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupAggregateArgs>(args: Subset<T, GroupAggregateArgs>): Prisma.PrismaPromise<GetGroupAggregateType<T>>

    /**
     * Group by Group.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupGroupByArgs['orderBy'] }
        : { orderBy?: GroupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Group model
   */
  readonly fields: GroupFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Group.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GroupClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ownedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    users<T extends Group$usersArgs<ExtArgs> = {}>(args?: Subset<T, Group$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    suggestions<T extends Group$suggestionsArgs<ExtArgs> = {}>(args?: Subset<T, Group$suggestionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupSuggestionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Group model
   */ 
  interface GroupFieldRefs {
    readonly id: FieldRef<"Group", 'String'>
    readonly name: FieldRef<"Group", 'String'>
    readonly minAge: FieldRef<"Group", 'Int'>
    readonly maxAge: FieldRef<"Group", 'Int'>
    readonly genres: FieldRef<"Group", 'String[]'>
    readonly image: FieldRef<"Group", 'Json'>
    readonly likes: FieldRef<"Group", 'String[]'>
    readonly dislikes: FieldRef<"Group", 'String[]'>
    readonly usersId: FieldRef<"Group", 'String[]'>
    readonly ownerId: FieldRef<"Group", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Group findUnique
   */
  export type GroupFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group findUniqueOrThrow
   */
  export type GroupFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group findFirst
   */
  export type GroupFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups.
     */
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * Group findFirstOrThrow
   */
  export type GroupFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups.
     */
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * Group findMany
   */
  export type GroupFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Groups to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * Group create
   */
  export type GroupCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * The data needed to create a Group.
     */
    data: XOR<GroupCreateInput, GroupUncheckedCreateInput>
  }

  /**
   * Group createMany
   */
  export type GroupCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Groups.
     */
    data: GroupCreateManyInput | GroupCreateManyInput[]
  }

  /**
   * Group update
   */
  export type GroupUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * The data needed to update a Group.
     */
    data: XOR<GroupUpdateInput, GroupUncheckedUpdateInput>
    /**
     * Choose, which Group to update.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group updateMany
   */
  export type GroupUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Groups.
     */
    data: XOR<GroupUpdateManyMutationInput, GroupUncheckedUpdateManyInput>
    /**
     * Filter which Groups to update
     */
    where?: GroupWhereInput
  }

  /**
   * Group upsert
   */
  export type GroupUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * The filter to search for the Group to update in case it exists.
     */
    where: GroupWhereUniqueInput
    /**
     * In case the Group found by the `where` argument doesn't exist, create a new Group with this data.
     */
    create: XOR<GroupCreateInput, GroupUncheckedCreateInput>
    /**
     * In case the Group was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GroupUpdateInput, GroupUncheckedUpdateInput>
  }

  /**
   * Group delete
   */
  export type GroupDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter which Group to delete.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group deleteMany
   */
  export type GroupDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Groups to delete
     */
    where?: GroupWhereInput
  }

  /**
   * Group findRaw
   */
  export type GroupFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Group aggregateRaw
   */
  export type GroupAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Group.users
   */
  export type Group$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Group.suggestions
   */
  export type Group$suggestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupSuggestion
     */
    select?: GroupSuggestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupSuggestionInclude<ExtArgs> | null
    where?: GroupSuggestionWhereInput
    orderBy?: GroupSuggestionOrderByWithRelationInput | GroupSuggestionOrderByWithRelationInput[]
    cursor?: GroupSuggestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupSuggestionScalarFieldEnum | GroupSuggestionScalarFieldEnum[]
  }

  /**
   * Group without action
   */
  export type GroupDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    password: 'password',
    age: 'age',
    image: 'image',
    status: 'status',
    role: 'role',
    firstTime: 'firstTime',
    mediaId: 'mediaId',
    likes: 'likes',
    dislikes: 'dislikes',
    genres: 'genres',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    groupsId: 'groupsId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const GroupSuggestionScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    genres: 'genres',
    type: 'type',
    platforms: 'platforms',
    groupId: 'groupId'
  };

  export type GroupSuggestionScalarFieldEnum = (typeof GroupSuggestionScalarFieldEnum)[keyof typeof GroupSuggestionScalarFieldEnum]


  export const UserSuggestionScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    genres: 'genres',
    type: 'type',
    platforms: 'platforms',
    authorId: 'authorId'
  };

  export type UserSuggestionScalarFieldEnum = (typeof UserSuggestionScalarFieldEnum)[keyof typeof UserSuggestionScalarFieldEnum]


  export const MediaScalarFieldEnum: {
    id: 'id',
    name: 'name',
    producer: 'producer',
    type: 'type'
  };

  export type MediaScalarFieldEnum = (typeof MediaScalarFieldEnum)[keyof typeof MediaScalarFieldEnum]


  export const GroupScalarFieldEnum: {
    id: 'id',
    name: 'name',
    minAge: 'minAge',
    maxAge: 'maxAge',
    genres: 'genres',
    image: 'image',
    likes: 'likes',
    dislikes: 'dislikes',
    usersId: 'usersId',
    ownerId: 'ownerId'
  };

  export type GroupScalarFieldEnum = (typeof GroupScalarFieldEnum)[keyof typeof GroupScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'MediaType'
   */
  export type EnumMediaTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MediaType'>
    


  /**
   * Reference to a field of type 'MediaType[]'
   */
  export type ListEnumMediaTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MediaType[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    age?: IntFilter<"User"> | number
    image?: StringNullableFilter<"User"> | string | null
    status?: BoolFilter<"User"> | boolean
    role?: EnumRoleFilter<"User"> | $Enums.Role
    firstTime?: BoolFilter<"User"> | boolean
    likes?: StringNullableListFilter<"User">
    dislikes?: StringNullableListFilter<"User">
    genres?: StringNullableListFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    groupsId?: StringNullableListFilter<"User">
    suggestions?: UserSuggestionListRelationFilter
    groups?: GroupListRelationFilter
    createdGroups?: GroupListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    age?: SortOrder
    image?: SortOrder
    status?: SortOrder
    role?: SortOrder
    firstTime?: SortOrder
    likes?: SortOrder
    dislikes?: SortOrder
    genres?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    groupsId?: SortOrder
    suggestions?: UserSuggestionOrderByRelationAggregateInput
    groups?: GroupOrderByRelationAggregateInput
    createdGroups?: GroupOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    age?: IntFilter<"User"> | number
    image?: StringNullableFilter<"User"> | string | null
    status?: BoolFilter<"User"> | boolean
    role?: EnumRoleFilter<"User"> | $Enums.Role
    firstTime?: BoolFilter<"User"> | boolean
    likes?: StringNullableListFilter<"User">
    dislikes?: StringNullableListFilter<"User">
    genres?: StringNullableListFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    groupsId?: StringNullableListFilter<"User">
    suggestions?: UserSuggestionListRelationFilter
    groups?: GroupListRelationFilter
    createdGroups?: GroupListRelationFilter
  }, "id" | "username" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    age?: SortOrder
    image?: SortOrder
    status?: SortOrder
    role?: SortOrder
    firstTime?: SortOrder
    likes?: SortOrder
    dislikes?: SortOrder
    genres?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    groupsId?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    age?: IntWithAggregatesFilter<"User"> | number
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    status?: BoolWithAggregatesFilter<"User"> | boolean
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    firstTime?: BoolWithAggregatesFilter<"User"> | boolean
    likes?: StringNullableListFilter<"User">
    dislikes?: StringNullableListFilter<"User">
    genres?: StringNullableListFilter<"User">
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    groupsId?: StringNullableListFilter<"User">
  }

  export type GroupSuggestionWhereInput = {
    AND?: GroupSuggestionWhereInput | GroupSuggestionWhereInput[]
    OR?: GroupSuggestionWhereInput[]
    NOT?: GroupSuggestionWhereInput | GroupSuggestionWhereInput[]
    id?: StringFilter<"GroupSuggestion"> | string
    title?: StringFilter<"GroupSuggestion"> | string
    description?: StringFilter<"GroupSuggestion"> | string
    genres?: StringNullableListFilter<"GroupSuggestion">
    type?: EnumMediaTypeFilter<"GroupSuggestion"> | $Enums.MediaType
    platforms?: StringNullableListFilter<"GroupSuggestion">
    groupId?: StringFilter<"GroupSuggestion"> | string
    group?: XOR<GroupRelationFilter, GroupWhereInput>
  }

  export type GroupSuggestionOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    genres?: SortOrder
    type?: SortOrder
    platforms?: SortOrder
    groupId?: SortOrder
    group?: GroupOrderByWithRelationInput
  }

  export type GroupSuggestionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GroupSuggestionWhereInput | GroupSuggestionWhereInput[]
    OR?: GroupSuggestionWhereInput[]
    NOT?: GroupSuggestionWhereInput | GroupSuggestionWhereInput[]
    title?: StringFilter<"GroupSuggestion"> | string
    description?: StringFilter<"GroupSuggestion"> | string
    genres?: StringNullableListFilter<"GroupSuggestion">
    type?: EnumMediaTypeFilter<"GroupSuggestion"> | $Enums.MediaType
    platforms?: StringNullableListFilter<"GroupSuggestion">
    groupId?: StringFilter<"GroupSuggestion"> | string
    group?: XOR<GroupRelationFilter, GroupWhereInput>
  }, "id">

  export type GroupSuggestionOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    genres?: SortOrder
    type?: SortOrder
    platforms?: SortOrder
    groupId?: SortOrder
    _count?: GroupSuggestionCountOrderByAggregateInput
    _max?: GroupSuggestionMaxOrderByAggregateInput
    _min?: GroupSuggestionMinOrderByAggregateInput
  }

  export type GroupSuggestionScalarWhereWithAggregatesInput = {
    AND?: GroupSuggestionScalarWhereWithAggregatesInput | GroupSuggestionScalarWhereWithAggregatesInput[]
    OR?: GroupSuggestionScalarWhereWithAggregatesInput[]
    NOT?: GroupSuggestionScalarWhereWithAggregatesInput | GroupSuggestionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GroupSuggestion"> | string
    title?: StringWithAggregatesFilter<"GroupSuggestion"> | string
    description?: StringWithAggregatesFilter<"GroupSuggestion"> | string
    genres?: StringNullableListFilter<"GroupSuggestion">
    type?: EnumMediaTypeWithAggregatesFilter<"GroupSuggestion"> | $Enums.MediaType
    platforms?: StringNullableListFilter<"GroupSuggestion">
    groupId?: StringWithAggregatesFilter<"GroupSuggestion"> | string
  }

  export type UserSuggestionWhereInput = {
    AND?: UserSuggestionWhereInput | UserSuggestionWhereInput[]
    OR?: UserSuggestionWhereInput[]
    NOT?: UserSuggestionWhereInput | UserSuggestionWhereInput[]
    id?: StringFilter<"UserSuggestion"> | string
    title?: StringFilter<"UserSuggestion"> | string
    description?: StringFilter<"UserSuggestion"> | string
    genres?: StringNullableListFilter<"UserSuggestion">
    type?: EnumMediaTypeFilter<"UserSuggestion"> | $Enums.MediaType
    platforms?: StringNullableListFilter<"UserSuggestion">
    authorId?: StringFilter<"UserSuggestion"> | string
    author?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserSuggestionOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    genres?: SortOrder
    type?: SortOrder
    platforms?: SortOrder
    authorId?: SortOrder
    author?: UserOrderByWithRelationInput
  }

  export type UserSuggestionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserSuggestionWhereInput | UserSuggestionWhereInput[]
    OR?: UserSuggestionWhereInput[]
    NOT?: UserSuggestionWhereInput | UserSuggestionWhereInput[]
    title?: StringFilter<"UserSuggestion"> | string
    description?: StringFilter<"UserSuggestion"> | string
    genres?: StringNullableListFilter<"UserSuggestion">
    type?: EnumMediaTypeFilter<"UserSuggestion"> | $Enums.MediaType
    platforms?: StringNullableListFilter<"UserSuggestion">
    authorId?: StringFilter<"UserSuggestion"> | string
    author?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type UserSuggestionOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    genres?: SortOrder
    type?: SortOrder
    platforms?: SortOrder
    authorId?: SortOrder
    _count?: UserSuggestionCountOrderByAggregateInput
    _max?: UserSuggestionMaxOrderByAggregateInput
    _min?: UserSuggestionMinOrderByAggregateInput
  }

  export type UserSuggestionScalarWhereWithAggregatesInput = {
    AND?: UserSuggestionScalarWhereWithAggregatesInput | UserSuggestionScalarWhereWithAggregatesInput[]
    OR?: UserSuggestionScalarWhereWithAggregatesInput[]
    NOT?: UserSuggestionScalarWhereWithAggregatesInput | UserSuggestionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserSuggestion"> | string
    title?: StringWithAggregatesFilter<"UserSuggestion"> | string
    description?: StringWithAggregatesFilter<"UserSuggestion"> | string
    genres?: StringNullableListFilter<"UserSuggestion">
    type?: EnumMediaTypeWithAggregatesFilter<"UserSuggestion"> | $Enums.MediaType
    platforms?: StringNullableListFilter<"UserSuggestion">
    authorId?: StringWithAggregatesFilter<"UserSuggestion"> | string
  }

  export type MediaWhereInput = {
    AND?: MediaWhereInput | MediaWhereInput[]
    OR?: MediaWhereInput[]
    NOT?: MediaWhereInput | MediaWhereInput[]
    id?: StringFilter<"Media"> | string
    name?: StringFilter<"Media"> | string
    producer?: StringFilter<"Media"> | string
    type?: EnumMediaTypeFilter<"Media"> | $Enums.MediaType
  }

  export type MediaOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    producer?: SortOrder
    type?: SortOrder
  }

  export type MediaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MediaWhereInput | MediaWhereInput[]
    OR?: MediaWhereInput[]
    NOT?: MediaWhereInput | MediaWhereInput[]
    name?: StringFilter<"Media"> | string
    producer?: StringFilter<"Media"> | string
    type?: EnumMediaTypeFilter<"Media"> | $Enums.MediaType
  }, "id">

  export type MediaOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    producer?: SortOrder
    type?: SortOrder
    _count?: MediaCountOrderByAggregateInput
    _max?: MediaMaxOrderByAggregateInput
    _min?: MediaMinOrderByAggregateInput
  }

  export type MediaScalarWhereWithAggregatesInput = {
    AND?: MediaScalarWhereWithAggregatesInput | MediaScalarWhereWithAggregatesInput[]
    OR?: MediaScalarWhereWithAggregatesInput[]
    NOT?: MediaScalarWhereWithAggregatesInput | MediaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Media"> | string
    name?: StringWithAggregatesFilter<"Media"> | string
    producer?: StringWithAggregatesFilter<"Media"> | string
    type?: EnumMediaTypeWithAggregatesFilter<"Media"> | $Enums.MediaType
  }

  export type GroupWhereInput = {
    AND?: GroupWhereInput | GroupWhereInput[]
    OR?: GroupWhereInput[]
    NOT?: GroupWhereInput | GroupWhereInput[]
    id?: StringFilter<"Group"> | string
    name?: StringFilter<"Group"> | string
    minAge?: IntFilter<"Group"> | number
    maxAge?: IntFilter<"Group"> | number
    genres?: StringNullableListFilter<"Group">
    image?: JsonNullableFilter<"Group">
    likes?: StringNullableListFilter<"Group">
    dislikes?: StringNullableListFilter<"Group">
    usersId?: StringNullableListFilter<"Group">
    ownerId?: StringFilter<"Group"> | string
    ownedBy?: XOR<UserRelationFilter, UserWhereInput>
    users?: UserListRelationFilter
    suggestions?: GroupSuggestionListRelationFilter
  }

  export type GroupOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    minAge?: SortOrder
    maxAge?: SortOrder
    genres?: SortOrder
    image?: SortOrder
    likes?: SortOrder
    dislikes?: SortOrder
    usersId?: SortOrder
    ownerId?: SortOrder
    ownedBy?: UserOrderByWithRelationInput
    users?: UserOrderByRelationAggregateInput
    suggestions?: GroupSuggestionOrderByRelationAggregateInput
  }

  export type GroupWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GroupWhereInput | GroupWhereInput[]
    OR?: GroupWhereInput[]
    NOT?: GroupWhereInput | GroupWhereInput[]
    name?: StringFilter<"Group"> | string
    minAge?: IntFilter<"Group"> | number
    maxAge?: IntFilter<"Group"> | number
    genres?: StringNullableListFilter<"Group">
    image?: JsonNullableFilter<"Group">
    likes?: StringNullableListFilter<"Group">
    dislikes?: StringNullableListFilter<"Group">
    usersId?: StringNullableListFilter<"Group">
    ownerId?: StringFilter<"Group"> | string
    ownedBy?: XOR<UserRelationFilter, UserWhereInput>
    users?: UserListRelationFilter
    suggestions?: GroupSuggestionListRelationFilter
  }, "id">

  export type GroupOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    minAge?: SortOrder
    maxAge?: SortOrder
    genres?: SortOrder
    image?: SortOrder
    likes?: SortOrder
    dislikes?: SortOrder
    usersId?: SortOrder
    ownerId?: SortOrder
    _count?: GroupCountOrderByAggregateInput
    _avg?: GroupAvgOrderByAggregateInput
    _max?: GroupMaxOrderByAggregateInput
    _min?: GroupMinOrderByAggregateInput
    _sum?: GroupSumOrderByAggregateInput
  }

  export type GroupScalarWhereWithAggregatesInput = {
    AND?: GroupScalarWhereWithAggregatesInput | GroupScalarWhereWithAggregatesInput[]
    OR?: GroupScalarWhereWithAggregatesInput[]
    NOT?: GroupScalarWhereWithAggregatesInput | GroupScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Group"> | string
    name?: StringWithAggregatesFilter<"Group"> | string
    minAge?: IntWithAggregatesFilter<"Group"> | number
    maxAge?: IntWithAggregatesFilter<"Group"> | number
    genres?: StringNullableListFilter<"Group">
    image?: JsonNullableWithAggregatesFilter<"Group">
    likes?: StringNullableListFilter<"Group">
    dislikes?: StringNullableListFilter<"Group">
    usersId?: StringNullableListFilter<"Group">
    ownerId?: StringWithAggregatesFilter<"Group"> | string
  }

  export type UserCreateInput = {
    id?: string
    username: string
    email: string
    password: string
    age: number
    image?: string | null
    status?: boolean
    role?: $Enums.Role
    firstTime?: boolean
    likes?: UserCreatelikesInput | string[]
    dislikes?: UserCreatedislikesInput | string[]
    genres?: UserCreategenresInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    suggestions?: UserSuggestionCreateNestedManyWithoutAuthorInput
    groups?: GroupCreateNestedManyWithoutUsersInput
    createdGroups?: GroupCreateNestedManyWithoutOwnedByInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    username: string
    email: string
    password: string
    age: number
    image?: string | null
    status?: boolean
    role?: $Enums.Role
    firstTime?: boolean
    likes?: UserCreatelikesInput | string[]
    dislikes?: UserCreatedislikesInput | string[]
    genres?: UserCreategenresInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    groupsId?: UserCreategroupsIdInput | string[]
    suggestions?: UserSuggestionUncheckedCreateNestedManyWithoutAuthorInput
    groups?: GroupUncheckedCreateNestedManyWithoutUsersInput
    createdGroups?: GroupUncheckedCreateNestedManyWithoutOwnedByInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstTime?: BoolFieldUpdateOperationsInput | boolean
    likes?: UserUpdatelikesInput | string[]
    dislikes?: UserUpdatedislikesInput | string[]
    genres?: UserUpdategenresInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    suggestions?: UserSuggestionUpdateManyWithoutAuthorNestedInput
    groups?: GroupUpdateManyWithoutUsersNestedInput
    createdGroups?: GroupUpdateManyWithoutOwnedByNestedInput
  }

  export type UserUncheckedUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstTime?: BoolFieldUpdateOperationsInput | boolean
    likes?: UserUpdatelikesInput | string[]
    dislikes?: UserUpdatedislikesInput | string[]
    genres?: UserUpdategenresInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groupsId?: UserUpdategroupsIdInput | string[]
    suggestions?: UserSuggestionUncheckedUpdateManyWithoutAuthorNestedInput
    groups?: GroupUncheckedUpdateManyWithoutUsersNestedInput
    createdGroups?: GroupUncheckedUpdateManyWithoutOwnedByNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    username: string
    email: string
    password: string
    age: number
    image?: string | null
    status?: boolean
    role?: $Enums.Role
    firstTime?: boolean
    likes?: UserCreatelikesInput | string[]
    dislikes?: UserCreatedislikesInput | string[]
    genres?: UserCreategenresInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    groupsId?: UserCreategroupsIdInput | string[]
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstTime?: BoolFieldUpdateOperationsInput | boolean
    likes?: UserUpdatelikesInput | string[]
    dislikes?: UserUpdatedislikesInput | string[]
    genres?: UserUpdategenresInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstTime?: BoolFieldUpdateOperationsInput | boolean
    likes?: UserUpdatelikesInput | string[]
    dislikes?: UserUpdatedislikesInput | string[]
    genres?: UserUpdategenresInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groupsId?: UserUpdategroupsIdInput | string[]
  }

  export type GroupSuggestionCreateInput = {
    id?: string
    title: string
    description: string
    genres?: GroupSuggestionCreategenresInput | string[]
    type: $Enums.MediaType
    platforms?: GroupSuggestionCreateplatformsInput | string[]
    group: GroupCreateNestedOneWithoutSuggestionsInput
  }

  export type GroupSuggestionUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    genres?: GroupSuggestionCreategenresInput | string[]
    type: $Enums.MediaType
    platforms?: GroupSuggestionCreateplatformsInput | string[]
    groupId: string
  }

  export type GroupSuggestionUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genres?: GroupSuggestionUpdategenresInput | string[]
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    platforms?: GroupSuggestionUpdateplatformsInput | string[]
    group?: GroupUpdateOneRequiredWithoutSuggestionsNestedInput
  }

  export type GroupSuggestionUncheckedUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genres?: GroupSuggestionUpdategenresInput | string[]
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    platforms?: GroupSuggestionUpdateplatformsInput | string[]
    groupId?: StringFieldUpdateOperationsInput | string
  }

  export type GroupSuggestionCreateManyInput = {
    id?: string
    title: string
    description: string
    genres?: GroupSuggestionCreategenresInput | string[]
    type: $Enums.MediaType
    platforms?: GroupSuggestionCreateplatformsInput | string[]
    groupId: string
  }

  export type GroupSuggestionUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genres?: GroupSuggestionUpdategenresInput | string[]
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    platforms?: GroupSuggestionUpdateplatformsInput | string[]
  }

  export type GroupSuggestionUncheckedUpdateManyInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genres?: GroupSuggestionUpdategenresInput | string[]
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    platforms?: GroupSuggestionUpdateplatformsInput | string[]
    groupId?: StringFieldUpdateOperationsInput | string
  }

  export type UserSuggestionCreateInput = {
    id?: string
    title: string
    description: string
    genres?: UserSuggestionCreategenresInput | string[]
    type: $Enums.MediaType
    platforms?: UserSuggestionCreateplatformsInput | string[]
    author: UserCreateNestedOneWithoutSuggestionsInput
  }

  export type UserSuggestionUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    genres?: UserSuggestionCreategenresInput | string[]
    type: $Enums.MediaType
    platforms?: UserSuggestionCreateplatformsInput | string[]
    authorId: string
  }

  export type UserSuggestionUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genres?: UserSuggestionUpdategenresInput | string[]
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    platforms?: UserSuggestionUpdateplatformsInput | string[]
    author?: UserUpdateOneRequiredWithoutSuggestionsNestedInput
  }

  export type UserSuggestionUncheckedUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genres?: UserSuggestionUpdategenresInput | string[]
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    platforms?: UserSuggestionUpdateplatformsInput | string[]
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type UserSuggestionCreateManyInput = {
    id?: string
    title: string
    description: string
    genres?: UserSuggestionCreategenresInput | string[]
    type: $Enums.MediaType
    platforms?: UserSuggestionCreateplatformsInput | string[]
    authorId: string
  }

  export type UserSuggestionUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genres?: UserSuggestionUpdategenresInput | string[]
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    platforms?: UserSuggestionUpdateplatformsInput | string[]
  }

  export type UserSuggestionUncheckedUpdateManyInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genres?: UserSuggestionUpdategenresInput | string[]
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    platforms?: UserSuggestionUpdateplatformsInput | string[]
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type MediaCreateInput = {
    id?: string
    name: string
    producer: string
    type: $Enums.MediaType
  }

  export type MediaUncheckedCreateInput = {
    id?: string
    name: string
    producer: string
    type: $Enums.MediaType
  }

  export type MediaUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    producer?: StringFieldUpdateOperationsInput | string
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
  }

  export type MediaUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    producer?: StringFieldUpdateOperationsInput | string
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
  }

  export type MediaCreateManyInput = {
    id?: string
    name: string
    producer: string
    type: $Enums.MediaType
  }

  export type MediaUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    producer?: StringFieldUpdateOperationsInput | string
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
  }

  export type MediaUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    producer?: StringFieldUpdateOperationsInput | string
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
  }

  export type GroupCreateInput = {
    id?: string
    name: string
    minAge: number
    maxAge: number
    genres?: GroupCreategenresInput | string[]
    image?: InputJsonValue | null
    likes?: GroupCreatelikesInput | string[]
    dislikes?: GroupCreatedislikesInput | string[]
    ownedBy: UserCreateNestedOneWithoutCreatedGroupsInput
    users?: UserCreateNestedManyWithoutGroupsInput
    suggestions?: GroupSuggestionCreateNestedManyWithoutGroupInput
  }

  export type GroupUncheckedCreateInput = {
    id?: string
    name: string
    minAge: number
    maxAge: number
    genres?: GroupCreategenresInput | string[]
    image?: InputJsonValue | null
    likes?: GroupCreatelikesInput | string[]
    dislikes?: GroupCreatedislikesInput | string[]
    usersId?: GroupCreateusersIdInput | string[]
    ownerId: string
    users?: UserUncheckedCreateNestedManyWithoutGroupsInput
    suggestions?: GroupSuggestionUncheckedCreateNestedManyWithoutGroupInput
  }

  export type GroupUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    minAge?: IntFieldUpdateOperationsInput | number
    maxAge?: IntFieldUpdateOperationsInput | number
    genres?: GroupUpdategenresInput | string[]
    image?: InputJsonValue | InputJsonValue | null
    likes?: GroupUpdatelikesInput | string[]
    dislikes?: GroupUpdatedislikesInput | string[]
    ownedBy?: UserUpdateOneRequiredWithoutCreatedGroupsNestedInput
    users?: UserUpdateManyWithoutGroupsNestedInput
    suggestions?: GroupSuggestionUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    minAge?: IntFieldUpdateOperationsInput | number
    maxAge?: IntFieldUpdateOperationsInput | number
    genres?: GroupUpdategenresInput | string[]
    image?: InputJsonValue | InputJsonValue | null
    likes?: GroupUpdatelikesInput | string[]
    dislikes?: GroupUpdatedislikesInput | string[]
    usersId?: GroupUpdateusersIdInput | string[]
    ownerId?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutGroupsNestedInput
    suggestions?: GroupSuggestionUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type GroupCreateManyInput = {
    id?: string
    name: string
    minAge: number
    maxAge: number
    genres?: GroupCreategenresInput | string[]
    image?: InputJsonValue | null
    likes?: GroupCreatelikesInput | string[]
    dislikes?: GroupCreatedislikesInput | string[]
    usersId?: GroupCreateusersIdInput | string[]
    ownerId: string
  }

  export type GroupUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    minAge?: IntFieldUpdateOperationsInput | number
    maxAge?: IntFieldUpdateOperationsInput | number
    genres?: GroupUpdategenresInput | string[]
    image?: InputJsonValue | InputJsonValue | null
    likes?: GroupUpdatelikesInput | string[]
    dislikes?: GroupUpdatedislikesInput | string[]
  }

  export type GroupUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    minAge?: IntFieldUpdateOperationsInput | number
    maxAge?: IntFieldUpdateOperationsInput | number
    genres?: GroupUpdategenresInput | string[]
    image?: InputJsonValue | InputJsonValue | null
    likes?: GroupUpdatelikesInput | string[]
    dislikes?: GroupUpdatedislikesInput | string[]
    usersId?: GroupUpdateusersIdInput | string[]
    ownerId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserSuggestionListRelationFilter = {
    every?: UserSuggestionWhereInput
    some?: UserSuggestionWhereInput
    none?: UserSuggestionWhereInput
  }

  export type GroupListRelationFilter = {
    every?: GroupWhereInput
    some?: GroupWhereInput
    none?: GroupWhereInput
  }

  export type UserSuggestionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GroupOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    age?: SortOrder
    image?: SortOrder
    status?: SortOrder
    role?: SortOrder
    firstTime?: SortOrder
    likes?: SortOrder
    dislikes?: SortOrder
    genres?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    groupsId?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    age?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    age?: SortOrder
    image?: SortOrder
    status?: SortOrder
    role?: SortOrder
    firstTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    age?: SortOrder
    image?: SortOrder
    status?: SortOrder
    role?: SortOrder
    firstTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    age?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumMediaTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MediaType | EnumMediaTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MediaType[] | ListEnumMediaTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MediaType[] | ListEnumMediaTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMediaTypeFilter<$PrismaModel> | $Enums.MediaType
  }

  export type GroupRelationFilter = {
    is?: GroupWhereInput
    isNot?: GroupWhereInput
  }

  export type GroupSuggestionCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    genres?: SortOrder
    type?: SortOrder
    platforms?: SortOrder
    groupId?: SortOrder
  }

  export type GroupSuggestionMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    groupId?: SortOrder
  }

  export type GroupSuggestionMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    groupId?: SortOrder
  }

  export type EnumMediaTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MediaType | EnumMediaTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MediaType[] | ListEnumMediaTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MediaType[] | ListEnumMediaTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMediaTypeWithAggregatesFilter<$PrismaModel> | $Enums.MediaType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMediaTypeFilter<$PrismaModel>
    _max?: NestedEnumMediaTypeFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserSuggestionCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    genres?: SortOrder
    type?: SortOrder
    platforms?: SortOrder
    authorId?: SortOrder
  }

  export type UserSuggestionMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    authorId?: SortOrder
  }

  export type UserSuggestionMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    authorId?: SortOrder
  }

  export type MediaCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    producer?: SortOrder
    type?: SortOrder
  }

  export type MediaMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    producer?: SortOrder
    type?: SortOrder
  }

  export type MediaMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    producer?: SortOrder
    type?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    isSet?: boolean
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type GroupSuggestionListRelationFilter = {
    every?: GroupSuggestionWhereInput
    some?: GroupSuggestionWhereInput
    none?: GroupSuggestionWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GroupSuggestionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GroupCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    minAge?: SortOrder
    maxAge?: SortOrder
    genres?: SortOrder
    image?: SortOrder
    likes?: SortOrder
    dislikes?: SortOrder
    usersId?: SortOrder
    ownerId?: SortOrder
  }

  export type GroupAvgOrderByAggregateInput = {
    minAge?: SortOrder
    maxAge?: SortOrder
  }

  export type GroupMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    minAge?: SortOrder
    maxAge?: SortOrder
    ownerId?: SortOrder
  }

  export type GroupMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    minAge?: SortOrder
    maxAge?: SortOrder
    ownerId?: SortOrder
  }

  export type GroupSumOrderByAggregateInput = {
    minAge?: SortOrder
    maxAge?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type UserCreatelikesInput = {
    set: string[]
  }

  export type UserCreatedislikesInput = {
    set: string[]
  }

  export type UserCreategenresInput = {
    set: string[]
  }

  export type UserSuggestionCreateNestedManyWithoutAuthorInput = {
    create?: XOR<UserSuggestionCreateWithoutAuthorInput, UserSuggestionUncheckedCreateWithoutAuthorInput> | UserSuggestionCreateWithoutAuthorInput[] | UserSuggestionUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: UserSuggestionCreateOrConnectWithoutAuthorInput | UserSuggestionCreateOrConnectWithoutAuthorInput[]
    createMany?: UserSuggestionCreateManyAuthorInputEnvelope
    connect?: UserSuggestionWhereUniqueInput | UserSuggestionWhereUniqueInput[]
  }

  export type GroupCreateNestedManyWithoutUsersInput = {
    create?: XOR<GroupCreateWithoutUsersInput, GroupUncheckedCreateWithoutUsersInput> | GroupCreateWithoutUsersInput[] | GroupUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutUsersInput | GroupCreateOrConnectWithoutUsersInput[]
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
  }

  export type GroupCreateNestedManyWithoutOwnedByInput = {
    create?: XOR<GroupCreateWithoutOwnedByInput, GroupUncheckedCreateWithoutOwnedByInput> | GroupCreateWithoutOwnedByInput[] | GroupUncheckedCreateWithoutOwnedByInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutOwnedByInput | GroupCreateOrConnectWithoutOwnedByInput[]
    createMany?: GroupCreateManyOwnedByInputEnvelope
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
  }

  export type UserCreategroupsIdInput = {
    set: string[]
  }

  export type UserSuggestionUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<UserSuggestionCreateWithoutAuthorInput, UserSuggestionUncheckedCreateWithoutAuthorInput> | UserSuggestionCreateWithoutAuthorInput[] | UserSuggestionUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: UserSuggestionCreateOrConnectWithoutAuthorInput | UserSuggestionCreateOrConnectWithoutAuthorInput[]
    createMany?: UserSuggestionCreateManyAuthorInputEnvelope
    connect?: UserSuggestionWhereUniqueInput | UserSuggestionWhereUniqueInput[]
  }

  export type GroupUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<GroupCreateWithoutUsersInput, GroupUncheckedCreateWithoutUsersInput> | GroupCreateWithoutUsersInput[] | GroupUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutUsersInput | GroupCreateOrConnectWithoutUsersInput[]
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
  }

  export type GroupUncheckedCreateNestedManyWithoutOwnedByInput = {
    create?: XOR<GroupCreateWithoutOwnedByInput, GroupUncheckedCreateWithoutOwnedByInput> | GroupCreateWithoutOwnedByInput[] | GroupUncheckedCreateWithoutOwnedByInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutOwnedByInput | GroupCreateOrConnectWithoutOwnedByInput[]
    createMany?: GroupCreateManyOwnedByInputEnvelope
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type UserUpdatelikesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdatedislikesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdategenresInput = {
    set?: string[]
    push?: string | string[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserSuggestionUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<UserSuggestionCreateWithoutAuthorInput, UserSuggestionUncheckedCreateWithoutAuthorInput> | UserSuggestionCreateWithoutAuthorInput[] | UserSuggestionUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: UserSuggestionCreateOrConnectWithoutAuthorInput | UserSuggestionCreateOrConnectWithoutAuthorInput[]
    upsert?: UserSuggestionUpsertWithWhereUniqueWithoutAuthorInput | UserSuggestionUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: UserSuggestionCreateManyAuthorInputEnvelope
    set?: UserSuggestionWhereUniqueInput | UserSuggestionWhereUniqueInput[]
    disconnect?: UserSuggestionWhereUniqueInput | UserSuggestionWhereUniqueInput[]
    delete?: UserSuggestionWhereUniqueInput | UserSuggestionWhereUniqueInput[]
    connect?: UserSuggestionWhereUniqueInput | UserSuggestionWhereUniqueInput[]
    update?: UserSuggestionUpdateWithWhereUniqueWithoutAuthorInput | UserSuggestionUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: UserSuggestionUpdateManyWithWhereWithoutAuthorInput | UserSuggestionUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: UserSuggestionScalarWhereInput | UserSuggestionScalarWhereInput[]
  }

  export type GroupUpdateManyWithoutUsersNestedInput = {
    create?: XOR<GroupCreateWithoutUsersInput, GroupUncheckedCreateWithoutUsersInput> | GroupCreateWithoutUsersInput[] | GroupUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutUsersInput | GroupCreateOrConnectWithoutUsersInput[]
    upsert?: GroupUpsertWithWhereUniqueWithoutUsersInput | GroupUpsertWithWhereUniqueWithoutUsersInput[]
    set?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    disconnect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    delete?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    update?: GroupUpdateWithWhereUniqueWithoutUsersInput | GroupUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: GroupUpdateManyWithWhereWithoutUsersInput | GroupUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: GroupScalarWhereInput | GroupScalarWhereInput[]
  }

  export type GroupUpdateManyWithoutOwnedByNestedInput = {
    create?: XOR<GroupCreateWithoutOwnedByInput, GroupUncheckedCreateWithoutOwnedByInput> | GroupCreateWithoutOwnedByInput[] | GroupUncheckedCreateWithoutOwnedByInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutOwnedByInput | GroupCreateOrConnectWithoutOwnedByInput[]
    upsert?: GroupUpsertWithWhereUniqueWithoutOwnedByInput | GroupUpsertWithWhereUniqueWithoutOwnedByInput[]
    createMany?: GroupCreateManyOwnedByInputEnvelope
    set?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    disconnect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    delete?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    update?: GroupUpdateWithWhereUniqueWithoutOwnedByInput | GroupUpdateWithWhereUniqueWithoutOwnedByInput[]
    updateMany?: GroupUpdateManyWithWhereWithoutOwnedByInput | GroupUpdateManyWithWhereWithoutOwnedByInput[]
    deleteMany?: GroupScalarWhereInput | GroupScalarWhereInput[]
  }

  export type UserUpdategroupsIdInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserSuggestionUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<UserSuggestionCreateWithoutAuthorInput, UserSuggestionUncheckedCreateWithoutAuthorInput> | UserSuggestionCreateWithoutAuthorInput[] | UserSuggestionUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: UserSuggestionCreateOrConnectWithoutAuthorInput | UserSuggestionCreateOrConnectWithoutAuthorInput[]
    upsert?: UserSuggestionUpsertWithWhereUniqueWithoutAuthorInput | UserSuggestionUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: UserSuggestionCreateManyAuthorInputEnvelope
    set?: UserSuggestionWhereUniqueInput | UserSuggestionWhereUniqueInput[]
    disconnect?: UserSuggestionWhereUniqueInput | UserSuggestionWhereUniqueInput[]
    delete?: UserSuggestionWhereUniqueInput | UserSuggestionWhereUniqueInput[]
    connect?: UserSuggestionWhereUniqueInput | UserSuggestionWhereUniqueInput[]
    update?: UserSuggestionUpdateWithWhereUniqueWithoutAuthorInput | UserSuggestionUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: UserSuggestionUpdateManyWithWhereWithoutAuthorInput | UserSuggestionUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: UserSuggestionScalarWhereInput | UserSuggestionScalarWhereInput[]
  }

  export type GroupUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<GroupCreateWithoutUsersInput, GroupUncheckedCreateWithoutUsersInput> | GroupCreateWithoutUsersInput[] | GroupUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutUsersInput | GroupCreateOrConnectWithoutUsersInput[]
    upsert?: GroupUpsertWithWhereUniqueWithoutUsersInput | GroupUpsertWithWhereUniqueWithoutUsersInput[]
    set?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    disconnect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    delete?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    update?: GroupUpdateWithWhereUniqueWithoutUsersInput | GroupUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: GroupUpdateManyWithWhereWithoutUsersInput | GroupUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: GroupScalarWhereInput | GroupScalarWhereInput[]
  }

  export type GroupUncheckedUpdateManyWithoutOwnedByNestedInput = {
    create?: XOR<GroupCreateWithoutOwnedByInput, GroupUncheckedCreateWithoutOwnedByInput> | GroupCreateWithoutOwnedByInput[] | GroupUncheckedCreateWithoutOwnedByInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutOwnedByInput | GroupCreateOrConnectWithoutOwnedByInput[]
    upsert?: GroupUpsertWithWhereUniqueWithoutOwnedByInput | GroupUpsertWithWhereUniqueWithoutOwnedByInput[]
    createMany?: GroupCreateManyOwnedByInputEnvelope
    set?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    disconnect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    delete?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    update?: GroupUpdateWithWhereUniqueWithoutOwnedByInput | GroupUpdateWithWhereUniqueWithoutOwnedByInput[]
    updateMany?: GroupUpdateManyWithWhereWithoutOwnedByInput | GroupUpdateManyWithWhereWithoutOwnedByInput[]
    deleteMany?: GroupScalarWhereInput | GroupScalarWhereInput[]
  }

  export type GroupSuggestionCreategenresInput = {
    set: string[]
  }

  export type GroupSuggestionCreateplatformsInput = {
    set: string[]
  }

  export type GroupCreateNestedOneWithoutSuggestionsInput = {
    create?: XOR<GroupCreateWithoutSuggestionsInput, GroupUncheckedCreateWithoutSuggestionsInput>
    connectOrCreate?: GroupCreateOrConnectWithoutSuggestionsInput
    connect?: GroupWhereUniqueInput
  }

  export type GroupSuggestionUpdategenresInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumMediaTypeFieldUpdateOperationsInput = {
    set?: $Enums.MediaType
  }

  export type GroupSuggestionUpdateplatformsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type GroupUpdateOneRequiredWithoutSuggestionsNestedInput = {
    create?: XOR<GroupCreateWithoutSuggestionsInput, GroupUncheckedCreateWithoutSuggestionsInput>
    connectOrCreate?: GroupCreateOrConnectWithoutSuggestionsInput
    upsert?: GroupUpsertWithoutSuggestionsInput
    connect?: GroupWhereUniqueInput
    update?: XOR<XOR<GroupUpdateToOneWithWhereWithoutSuggestionsInput, GroupUpdateWithoutSuggestionsInput>, GroupUncheckedUpdateWithoutSuggestionsInput>
  }

  export type UserSuggestionCreategenresInput = {
    set: string[]
  }

  export type UserSuggestionCreateplatformsInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutSuggestionsInput = {
    create?: XOR<UserCreateWithoutSuggestionsInput, UserUncheckedCreateWithoutSuggestionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSuggestionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserSuggestionUpdategenresInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserSuggestionUpdateplatformsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutSuggestionsNestedInput = {
    create?: XOR<UserCreateWithoutSuggestionsInput, UserUncheckedCreateWithoutSuggestionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSuggestionsInput
    upsert?: UserUpsertWithoutSuggestionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSuggestionsInput, UserUpdateWithoutSuggestionsInput>, UserUncheckedUpdateWithoutSuggestionsInput>
  }

  export type GroupCreategenresInput = {
    set: string[]
  }

  export type GroupCreatelikesInput = {
    set: string[]
  }

  export type GroupCreatedislikesInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutCreatedGroupsInput = {
    create?: XOR<UserCreateWithoutCreatedGroupsInput, UserUncheckedCreateWithoutCreatedGroupsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedGroupsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutGroupsInput = {
    create?: XOR<UserCreateWithoutGroupsInput, UserUncheckedCreateWithoutGroupsInput> | UserCreateWithoutGroupsInput[] | UserUncheckedCreateWithoutGroupsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutGroupsInput | UserCreateOrConnectWithoutGroupsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type GroupSuggestionCreateNestedManyWithoutGroupInput = {
    create?: XOR<GroupSuggestionCreateWithoutGroupInput, GroupSuggestionUncheckedCreateWithoutGroupInput> | GroupSuggestionCreateWithoutGroupInput[] | GroupSuggestionUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: GroupSuggestionCreateOrConnectWithoutGroupInput | GroupSuggestionCreateOrConnectWithoutGroupInput[]
    createMany?: GroupSuggestionCreateManyGroupInputEnvelope
    connect?: GroupSuggestionWhereUniqueInput | GroupSuggestionWhereUniqueInput[]
  }

  export type GroupCreateusersIdInput = {
    set: string[]
  }

  export type UserUncheckedCreateNestedManyWithoutGroupsInput = {
    create?: XOR<UserCreateWithoutGroupsInput, UserUncheckedCreateWithoutGroupsInput> | UserCreateWithoutGroupsInput[] | UserUncheckedCreateWithoutGroupsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutGroupsInput | UserCreateOrConnectWithoutGroupsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type GroupSuggestionUncheckedCreateNestedManyWithoutGroupInput = {
    create?: XOR<GroupSuggestionCreateWithoutGroupInput, GroupSuggestionUncheckedCreateWithoutGroupInput> | GroupSuggestionCreateWithoutGroupInput[] | GroupSuggestionUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: GroupSuggestionCreateOrConnectWithoutGroupInput | GroupSuggestionCreateOrConnectWithoutGroupInput[]
    createMany?: GroupSuggestionCreateManyGroupInputEnvelope
    connect?: GroupSuggestionWhereUniqueInput | GroupSuggestionWhereUniqueInput[]
  }

  export type GroupUpdategenresInput = {
    set?: string[]
    push?: string | string[]
  }

  export type GroupUpdatelikesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type GroupUpdatedislikesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutCreatedGroupsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedGroupsInput, UserUncheckedCreateWithoutCreatedGroupsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedGroupsInput
    upsert?: UserUpsertWithoutCreatedGroupsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedGroupsInput, UserUpdateWithoutCreatedGroupsInput>, UserUncheckedUpdateWithoutCreatedGroupsInput>
  }

  export type UserUpdateManyWithoutGroupsNestedInput = {
    create?: XOR<UserCreateWithoutGroupsInput, UserUncheckedCreateWithoutGroupsInput> | UserCreateWithoutGroupsInput[] | UserUncheckedCreateWithoutGroupsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutGroupsInput | UserCreateOrConnectWithoutGroupsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutGroupsInput | UserUpsertWithWhereUniqueWithoutGroupsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutGroupsInput | UserUpdateWithWhereUniqueWithoutGroupsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutGroupsInput | UserUpdateManyWithWhereWithoutGroupsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type GroupSuggestionUpdateManyWithoutGroupNestedInput = {
    create?: XOR<GroupSuggestionCreateWithoutGroupInput, GroupSuggestionUncheckedCreateWithoutGroupInput> | GroupSuggestionCreateWithoutGroupInput[] | GroupSuggestionUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: GroupSuggestionCreateOrConnectWithoutGroupInput | GroupSuggestionCreateOrConnectWithoutGroupInput[]
    upsert?: GroupSuggestionUpsertWithWhereUniqueWithoutGroupInput | GroupSuggestionUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: GroupSuggestionCreateManyGroupInputEnvelope
    set?: GroupSuggestionWhereUniqueInput | GroupSuggestionWhereUniqueInput[]
    disconnect?: GroupSuggestionWhereUniqueInput | GroupSuggestionWhereUniqueInput[]
    delete?: GroupSuggestionWhereUniqueInput | GroupSuggestionWhereUniqueInput[]
    connect?: GroupSuggestionWhereUniqueInput | GroupSuggestionWhereUniqueInput[]
    update?: GroupSuggestionUpdateWithWhereUniqueWithoutGroupInput | GroupSuggestionUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: GroupSuggestionUpdateManyWithWhereWithoutGroupInput | GroupSuggestionUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: GroupSuggestionScalarWhereInput | GroupSuggestionScalarWhereInput[]
  }

  export type GroupUpdateusersIdInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUncheckedUpdateManyWithoutGroupsNestedInput = {
    create?: XOR<UserCreateWithoutGroupsInput, UserUncheckedCreateWithoutGroupsInput> | UserCreateWithoutGroupsInput[] | UserUncheckedCreateWithoutGroupsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutGroupsInput | UserCreateOrConnectWithoutGroupsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutGroupsInput | UserUpsertWithWhereUniqueWithoutGroupsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutGroupsInput | UserUpdateWithWhereUniqueWithoutGroupsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutGroupsInput | UserUpdateManyWithWhereWithoutGroupsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type GroupSuggestionUncheckedUpdateManyWithoutGroupNestedInput = {
    create?: XOR<GroupSuggestionCreateWithoutGroupInput, GroupSuggestionUncheckedCreateWithoutGroupInput> | GroupSuggestionCreateWithoutGroupInput[] | GroupSuggestionUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: GroupSuggestionCreateOrConnectWithoutGroupInput | GroupSuggestionCreateOrConnectWithoutGroupInput[]
    upsert?: GroupSuggestionUpsertWithWhereUniqueWithoutGroupInput | GroupSuggestionUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: GroupSuggestionCreateManyGroupInputEnvelope
    set?: GroupSuggestionWhereUniqueInput | GroupSuggestionWhereUniqueInput[]
    disconnect?: GroupSuggestionWhereUniqueInput | GroupSuggestionWhereUniqueInput[]
    delete?: GroupSuggestionWhereUniqueInput | GroupSuggestionWhereUniqueInput[]
    connect?: GroupSuggestionWhereUniqueInput | GroupSuggestionWhereUniqueInput[]
    update?: GroupSuggestionUpdateWithWhereUniqueWithoutGroupInput | GroupSuggestionUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: GroupSuggestionUpdateManyWithWhereWithoutGroupInput | GroupSuggestionUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: GroupSuggestionScalarWhereInput | GroupSuggestionScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumMediaTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MediaType | EnumMediaTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MediaType[] | ListEnumMediaTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MediaType[] | ListEnumMediaTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMediaTypeFilter<$PrismaModel> | $Enums.MediaType
  }

  export type NestedEnumMediaTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MediaType | EnumMediaTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MediaType[] | ListEnumMediaTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MediaType[] | ListEnumMediaTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMediaTypeWithAggregatesFilter<$PrismaModel> | $Enums.MediaType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMediaTypeFilter<$PrismaModel>
    _max?: NestedEnumMediaTypeFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    isSet?: boolean
  }

  export type UserSuggestionCreateWithoutAuthorInput = {
    id?: string
    title: string
    description: string
    genres?: UserSuggestionCreategenresInput | string[]
    type: $Enums.MediaType
    platforms?: UserSuggestionCreateplatformsInput | string[]
  }

  export type UserSuggestionUncheckedCreateWithoutAuthorInput = {
    id?: string
    title: string
    description: string
    genres?: UserSuggestionCreategenresInput | string[]
    type: $Enums.MediaType
    platforms?: UserSuggestionCreateplatformsInput | string[]
  }

  export type UserSuggestionCreateOrConnectWithoutAuthorInput = {
    where: UserSuggestionWhereUniqueInput
    create: XOR<UserSuggestionCreateWithoutAuthorInput, UserSuggestionUncheckedCreateWithoutAuthorInput>
  }

  export type UserSuggestionCreateManyAuthorInputEnvelope = {
    data: UserSuggestionCreateManyAuthorInput | UserSuggestionCreateManyAuthorInput[]
  }

  export type GroupCreateWithoutUsersInput = {
    id?: string
    name: string
    minAge: number
    maxAge: number
    genres?: GroupCreategenresInput | string[]
    image?: InputJsonValue | null
    likes?: GroupCreatelikesInput | string[]
    dislikes?: GroupCreatedislikesInput | string[]
    ownedBy: UserCreateNestedOneWithoutCreatedGroupsInput
    suggestions?: GroupSuggestionCreateNestedManyWithoutGroupInput
  }

  export type GroupUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    minAge: number
    maxAge: number
    genres?: GroupCreategenresInput | string[]
    image?: InputJsonValue | null
    likes?: GroupCreatelikesInput | string[]
    dislikes?: GroupCreatedislikesInput | string[]
    usersId?: GroupCreateusersIdInput | string[]
    ownerId: string
    suggestions?: GroupSuggestionUncheckedCreateNestedManyWithoutGroupInput
  }

  export type GroupCreateOrConnectWithoutUsersInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutUsersInput, GroupUncheckedCreateWithoutUsersInput>
  }

  export type GroupCreateWithoutOwnedByInput = {
    id?: string
    name: string
    minAge: number
    maxAge: number
    genres?: GroupCreategenresInput | string[]
    image?: InputJsonValue | null
    likes?: GroupCreatelikesInput | string[]
    dislikes?: GroupCreatedislikesInput | string[]
    users?: UserCreateNestedManyWithoutGroupsInput
    suggestions?: GroupSuggestionCreateNestedManyWithoutGroupInput
  }

  export type GroupUncheckedCreateWithoutOwnedByInput = {
    id?: string
    name: string
    minAge: number
    maxAge: number
    genres?: GroupCreategenresInput | string[]
    image?: InputJsonValue | null
    likes?: GroupCreatelikesInput | string[]
    dislikes?: GroupCreatedislikesInput | string[]
    usersId?: GroupCreateusersIdInput | string[]
    users?: UserUncheckedCreateNestedManyWithoutGroupsInput
    suggestions?: GroupSuggestionUncheckedCreateNestedManyWithoutGroupInput
  }

  export type GroupCreateOrConnectWithoutOwnedByInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutOwnedByInput, GroupUncheckedCreateWithoutOwnedByInput>
  }

  export type GroupCreateManyOwnedByInputEnvelope = {
    data: GroupCreateManyOwnedByInput | GroupCreateManyOwnedByInput[]
  }

  export type UserSuggestionUpsertWithWhereUniqueWithoutAuthorInput = {
    where: UserSuggestionWhereUniqueInput
    update: XOR<UserSuggestionUpdateWithoutAuthorInput, UserSuggestionUncheckedUpdateWithoutAuthorInput>
    create: XOR<UserSuggestionCreateWithoutAuthorInput, UserSuggestionUncheckedCreateWithoutAuthorInput>
  }

  export type UserSuggestionUpdateWithWhereUniqueWithoutAuthorInput = {
    where: UserSuggestionWhereUniqueInput
    data: XOR<UserSuggestionUpdateWithoutAuthorInput, UserSuggestionUncheckedUpdateWithoutAuthorInput>
  }

  export type UserSuggestionUpdateManyWithWhereWithoutAuthorInput = {
    where: UserSuggestionScalarWhereInput
    data: XOR<UserSuggestionUpdateManyMutationInput, UserSuggestionUncheckedUpdateManyWithoutAuthorInput>
  }

  export type UserSuggestionScalarWhereInput = {
    AND?: UserSuggestionScalarWhereInput | UserSuggestionScalarWhereInput[]
    OR?: UserSuggestionScalarWhereInput[]
    NOT?: UserSuggestionScalarWhereInput | UserSuggestionScalarWhereInput[]
    id?: StringFilter<"UserSuggestion"> | string
    title?: StringFilter<"UserSuggestion"> | string
    description?: StringFilter<"UserSuggestion"> | string
    genres?: StringNullableListFilter<"UserSuggestion">
    type?: EnumMediaTypeFilter<"UserSuggestion"> | $Enums.MediaType
    platforms?: StringNullableListFilter<"UserSuggestion">
    authorId?: StringFilter<"UserSuggestion"> | string
  }

  export type GroupUpsertWithWhereUniqueWithoutUsersInput = {
    where: GroupWhereUniqueInput
    update: XOR<GroupUpdateWithoutUsersInput, GroupUncheckedUpdateWithoutUsersInput>
    create: XOR<GroupCreateWithoutUsersInput, GroupUncheckedCreateWithoutUsersInput>
  }

  export type GroupUpdateWithWhereUniqueWithoutUsersInput = {
    where: GroupWhereUniqueInput
    data: XOR<GroupUpdateWithoutUsersInput, GroupUncheckedUpdateWithoutUsersInput>
  }

  export type GroupUpdateManyWithWhereWithoutUsersInput = {
    where: GroupScalarWhereInput
    data: XOR<GroupUpdateManyMutationInput, GroupUncheckedUpdateManyWithoutUsersInput>
  }

  export type GroupScalarWhereInput = {
    AND?: GroupScalarWhereInput | GroupScalarWhereInput[]
    OR?: GroupScalarWhereInput[]
    NOT?: GroupScalarWhereInput | GroupScalarWhereInput[]
    id?: StringFilter<"Group"> | string
    name?: StringFilter<"Group"> | string
    minAge?: IntFilter<"Group"> | number
    maxAge?: IntFilter<"Group"> | number
    genres?: StringNullableListFilter<"Group">
    image?: JsonNullableFilter<"Group">
    likes?: StringNullableListFilter<"Group">
    dislikes?: StringNullableListFilter<"Group">
    usersId?: StringNullableListFilter<"Group">
    ownerId?: StringFilter<"Group"> | string
  }

  export type GroupUpsertWithWhereUniqueWithoutOwnedByInput = {
    where: GroupWhereUniqueInput
    update: XOR<GroupUpdateWithoutOwnedByInput, GroupUncheckedUpdateWithoutOwnedByInput>
    create: XOR<GroupCreateWithoutOwnedByInput, GroupUncheckedCreateWithoutOwnedByInput>
  }

  export type GroupUpdateWithWhereUniqueWithoutOwnedByInput = {
    where: GroupWhereUniqueInput
    data: XOR<GroupUpdateWithoutOwnedByInput, GroupUncheckedUpdateWithoutOwnedByInput>
  }

  export type GroupUpdateManyWithWhereWithoutOwnedByInput = {
    where: GroupScalarWhereInput
    data: XOR<GroupUpdateManyMutationInput, GroupUncheckedUpdateManyWithoutOwnedByInput>
  }

  export type GroupCreateWithoutSuggestionsInput = {
    id?: string
    name: string
    minAge: number
    maxAge: number
    genres?: GroupCreategenresInput | string[]
    image?: InputJsonValue | null
    likes?: GroupCreatelikesInput | string[]
    dislikes?: GroupCreatedislikesInput | string[]
    ownedBy: UserCreateNestedOneWithoutCreatedGroupsInput
    users?: UserCreateNestedManyWithoutGroupsInput
  }

  export type GroupUncheckedCreateWithoutSuggestionsInput = {
    id?: string
    name: string
    minAge: number
    maxAge: number
    genres?: GroupCreategenresInput | string[]
    image?: InputJsonValue | null
    likes?: GroupCreatelikesInput | string[]
    dislikes?: GroupCreatedislikesInput | string[]
    usersId?: GroupCreateusersIdInput | string[]
    ownerId: string
    users?: UserUncheckedCreateNestedManyWithoutGroupsInput
  }

  export type GroupCreateOrConnectWithoutSuggestionsInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutSuggestionsInput, GroupUncheckedCreateWithoutSuggestionsInput>
  }

  export type GroupUpsertWithoutSuggestionsInput = {
    update: XOR<GroupUpdateWithoutSuggestionsInput, GroupUncheckedUpdateWithoutSuggestionsInput>
    create: XOR<GroupCreateWithoutSuggestionsInput, GroupUncheckedCreateWithoutSuggestionsInput>
    where?: GroupWhereInput
  }

  export type GroupUpdateToOneWithWhereWithoutSuggestionsInput = {
    where?: GroupWhereInput
    data: XOR<GroupUpdateWithoutSuggestionsInput, GroupUncheckedUpdateWithoutSuggestionsInput>
  }

  export type GroupUpdateWithoutSuggestionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    minAge?: IntFieldUpdateOperationsInput | number
    maxAge?: IntFieldUpdateOperationsInput | number
    genres?: GroupUpdategenresInput | string[]
    image?: InputJsonValue | InputJsonValue | null
    likes?: GroupUpdatelikesInput | string[]
    dislikes?: GroupUpdatedislikesInput | string[]
    ownedBy?: UserUpdateOneRequiredWithoutCreatedGroupsNestedInput
    users?: UserUpdateManyWithoutGroupsNestedInput
  }

  export type GroupUncheckedUpdateWithoutSuggestionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    minAge?: IntFieldUpdateOperationsInput | number
    maxAge?: IntFieldUpdateOperationsInput | number
    genres?: GroupUpdategenresInput | string[]
    image?: InputJsonValue | InputJsonValue | null
    likes?: GroupUpdatelikesInput | string[]
    dislikes?: GroupUpdatedislikesInput | string[]
    usersId?: GroupUpdateusersIdInput | string[]
    ownerId?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutGroupsNestedInput
  }

  export type UserCreateWithoutSuggestionsInput = {
    id?: string
    username: string
    email: string
    password: string
    age: number
    image?: string | null
    status?: boolean
    role?: $Enums.Role
    firstTime?: boolean
    likes?: UserCreatelikesInput | string[]
    dislikes?: UserCreatedislikesInput | string[]
    genres?: UserCreategenresInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    groups?: GroupCreateNestedManyWithoutUsersInput
    createdGroups?: GroupCreateNestedManyWithoutOwnedByInput
  }

  export type UserUncheckedCreateWithoutSuggestionsInput = {
    id?: string
    username: string
    email: string
    password: string
    age: number
    image?: string | null
    status?: boolean
    role?: $Enums.Role
    firstTime?: boolean
    likes?: UserCreatelikesInput | string[]
    dislikes?: UserCreatedislikesInput | string[]
    genres?: UserCreategenresInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    groupsId?: UserCreategroupsIdInput | string[]
    groups?: GroupUncheckedCreateNestedManyWithoutUsersInput
    createdGroups?: GroupUncheckedCreateNestedManyWithoutOwnedByInput
  }

  export type UserCreateOrConnectWithoutSuggestionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSuggestionsInput, UserUncheckedCreateWithoutSuggestionsInput>
  }

  export type UserUpsertWithoutSuggestionsInput = {
    update: XOR<UserUpdateWithoutSuggestionsInput, UserUncheckedUpdateWithoutSuggestionsInput>
    create: XOR<UserCreateWithoutSuggestionsInput, UserUncheckedCreateWithoutSuggestionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSuggestionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSuggestionsInput, UserUncheckedUpdateWithoutSuggestionsInput>
  }

  export type UserUpdateWithoutSuggestionsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstTime?: BoolFieldUpdateOperationsInput | boolean
    likes?: UserUpdatelikesInput | string[]
    dislikes?: UserUpdatedislikesInput | string[]
    genres?: UserUpdategenresInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: GroupUpdateManyWithoutUsersNestedInput
    createdGroups?: GroupUpdateManyWithoutOwnedByNestedInput
  }

  export type UserUncheckedUpdateWithoutSuggestionsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstTime?: BoolFieldUpdateOperationsInput | boolean
    likes?: UserUpdatelikesInput | string[]
    dislikes?: UserUpdatedislikesInput | string[]
    genres?: UserUpdategenresInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groupsId?: UserUpdategroupsIdInput | string[]
    groups?: GroupUncheckedUpdateManyWithoutUsersNestedInput
    createdGroups?: GroupUncheckedUpdateManyWithoutOwnedByNestedInput
  }

  export type UserCreateWithoutCreatedGroupsInput = {
    id?: string
    username: string
    email: string
    password: string
    age: number
    image?: string | null
    status?: boolean
    role?: $Enums.Role
    firstTime?: boolean
    likes?: UserCreatelikesInput | string[]
    dislikes?: UserCreatedislikesInput | string[]
    genres?: UserCreategenresInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    suggestions?: UserSuggestionCreateNestedManyWithoutAuthorInput
    groups?: GroupCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutCreatedGroupsInput = {
    id?: string
    username: string
    email: string
    password: string
    age: number
    image?: string | null
    status?: boolean
    role?: $Enums.Role
    firstTime?: boolean
    likes?: UserCreatelikesInput | string[]
    dislikes?: UserCreatedislikesInput | string[]
    genres?: UserCreategenresInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    groupsId?: UserCreategroupsIdInput | string[]
    suggestions?: UserSuggestionUncheckedCreateNestedManyWithoutAuthorInput
    groups?: GroupUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutCreatedGroupsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedGroupsInput, UserUncheckedCreateWithoutCreatedGroupsInput>
  }

  export type UserCreateWithoutGroupsInput = {
    id?: string
    username: string
    email: string
    password: string
    age: number
    image?: string | null
    status?: boolean
    role?: $Enums.Role
    firstTime?: boolean
    likes?: UserCreatelikesInput | string[]
    dislikes?: UserCreatedislikesInput | string[]
    genres?: UserCreategenresInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    suggestions?: UserSuggestionCreateNestedManyWithoutAuthorInput
    createdGroups?: GroupCreateNestedManyWithoutOwnedByInput
  }

  export type UserUncheckedCreateWithoutGroupsInput = {
    id?: string
    username: string
    email: string
    password: string
    age: number
    image?: string | null
    status?: boolean
    role?: $Enums.Role
    firstTime?: boolean
    likes?: UserCreatelikesInput | string[]
    dislikes?: UserCreatedislikesInput | string[]
    genres?: UserCreategenresInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    groupsId?: UserCreategroupsIdInput | string[]
    suggestions?: UserSuggestionUncheckedCreateNestedManyWithoutAuthorInput
    createdGroups?: GroupUncheckedCreateNestedManyWithoutOwnedByInput
  }

  export type UserCreateOrConnectWithoutGroupsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGroupsInput, UserUncheckedCreateWithoutGroupsInput>
  }

  export type GroupSuggestionCreateWithoutGroupInput = {
    id?: string
    title: string
    description: string
    genres?: GroupSuggestionCreategenresInput | string[]
    type: $Enums.MediaType
    platforms?: GroupSuggestionCreateplatformsInput | string[]
  }

  export type GroupSuggestionUncheckedCreateWithoutGroupInput = {
    id?: string
    title: string
    description: string
    genres?: GroupSuggestionCreategenresInput | string[]
    type: $Enums.MediaType
    platforms?: GroupSuggestionCreateplatformsInput | string[]
  }

  export type GroupSuggestionCreateOrConnectWithoutGroupInput = {
    where: GroupSuggestionWhereUniqueInput
    create: XOR<GroupSuggestionCreateWithoutGroupInput, GroupSuggestionUncheckedCreateWithoutGroupInput>
  }

  export type GroupSuggestionCreateManyGroupInputEnvelope = {
    data: GroupSuggestionCreateManyGroupInput | GroupSuggestionCreateManyGroupInput[]
  }

  export type UserUpsertWithoutCreatedGroupsInput = {
    update: XOR<UserUpdateWithoutCreatedGroupsInput, UserUncheckedUpdateWithoutCreatedGroupsInput>
    create: XOR<UserCreateWithoutCreatedGroupsInput, UserUncheckedCreateWithoutCreatedGroupsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedGroupsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedGroupsInput, UserUncheckedUpdateWithoutCreatedGroupsInput>
  }

  export type UserUpdateWithoutCreatedGroupsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstTime?: BoolFieldUpdateOperationsInput | boolean
    likes?: UserUpdatelikesInput | string[]
    dislikes?: UserUpdatedislikesInput | string[]
    genres?: UserUpdategenresInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    suggestions?: UserSuggestionUpdateManyWithoutAuthorNestedInput
    groups?: GroupUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedGroupsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstTime?: BoolFieldUpdateOperationsInput | boolean
    likes?: UserUpdatelikesInput | string[]
    dislikes?: UserUpdatedislikesInput | string[]
    genres?: UserUpdategenresInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groupsId?: UserUpdategroupsIdInput | string[]
    suggestions?: UserSuggestionUncheckedUpdateManyWithoutAuthorNestedInput
    groups?: GroupUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutGroupsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutGroupsInput, UserUncheckedUpdateWithoutGroupsInput>
    create: XOR<UserCreateWithoutGroupsInput, UserUncheckedCreateWithoutGroupsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutGroupsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutGroupsInput, UserUncheckedUpdateWithoutGroupsInput>
  }

  export type UserUpdateManyWithWhereWithoutGroupsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutGroupsInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    age?: IntFilter<"User"> | number
    image?: StringNullableFilter<"User"> | string | null
    status?: BoolFilter<"User"> | boolean
    role?: EnumRoleFilter<"User"> | $Enums.Role
    firstTime?: BoolFilter<"User"> | boolean
    likes?: StringNullableListFilter<"User">
    dislikes?: StringNullableListFilter<"User">
    genres?: StringNullableListFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    groupsId?: StringNullableListFilter<"User">
  }

  export type GroupSuggestionUpsertWithWhereUniqueWithoutGroupInput = {
    where: GroupSuggestionWhereUniqueInput
    update: XOR<GroupSuggestionUpdateWithoutGroupInput, GroupSuggestionUncheckedUpdateWithoutGroupInput>
    create: XOR<GroupSuggestionCreateWithoutGroupInput, GroupSuggestionUncheckedCreateWithoutGroupInput>
  }

  export type GroupSuggestionUpdateWithWhereUniqueWithoutGroupInput = {
    where: GroupSuggestionWhereUniqueInput
    data: XOR<GroupSuggestionUpdateWithoutGroupInput, GroupSuggestionUncheckedUpdateWithoutGroupInput>
  }

  export type GroupSuggestionUpdateManyWithWhereWithoutGroupInput = {
    where: GroupSuggestionScalarWhereInput
    data: XOR<GroupSuggestionUpdateManyMutationInput, GroupSuggestionUncheckedUpdateManyWithoutGroupInput>
  }

  export type GroupSuggestionScalarWhereInput = {
    AND?: GroupSuggestionScalarWhereInput | GroupSuggestionScalarWhereInput[]
    OR?: GroupSuggestionScalarWhereInput[]
    NOT?: GroupSuggestionScalarWhereInput | GroupSuggestionScalarWhereInput[]
    id?: StringFilter<"GroupSuggestion"> | string
    title?: StringFilter<"GroupSuggestion"> | string
    description?: StringFilter<"GroupSuggestion"> | string
    genres?: StringNullableListFilter<"GroupSuggestion">
    type?: EnumMediaTypeFilter<"GroupSuggestion"> | $Enums.MediaType
    platforms?: StringNullableListFilter<"GroupSuggestion">
    groupId?: StringFilter<"GroupSuggestion"> | string
  }

  export type UserSuggestionCreateManyAuthorInput = {
    id?: string
    title: string
    description: string
    genres?: UserSuggestionCreategenresInput | string[]
    type: $Enums.MediaType
    platforms?: UserSuggestionCreateplatformsInput | string[]
  }

  export type GroupCreateManyOwnedByInput = {
    id?: string
    name: string
    minAge: number
    maxAge: number
    genres?: GroupCreategenresInput | string[]
    image?: InputJsonValue | null
    likes?: GroupCreatelikesInput | string[]
    dislikes?: GroupCreatedislikesInput | string[]
    usersId?: GroupCreateusersIdInput | string[]
  }

  export type UserSuggestionUpdateWithoutAuthorInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genres?: UserSuggestionUpdategenresInput | string[]
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    platforms?: UserSuggestionUpdateplatformsInput | string[]
  }

  export type UserSuggestionUncheckedUpdateWithoutAuthorInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genres?: UserSuggestionUpdategenresInput | string[]
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    platforms?: UserSuggestionUpdateplatformsInput | string[]
  }

  export type UserSuggestionUncheckedUpdateManyWithoutAuthorInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genres?: UserSuggestionUpdategenresInput | string[]
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    platforms?: UserSuggestionUpdateplatformsInput | string[]
  }

  export type GroupUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    minAge?: IntFieldUpdateOperationsInput | number
    maxAge?: IntFieldUpdateOperationsInput | number
    genres?: GroupUpdategenresInput | string[]
    image?: InputJsonValue | InputJsonValue | null
    likes?: GroupUpdatelikesInput | string[]
    dislikes?: GroupUpdatedislikesInput | string[]
    ownedBy?: UserUpdateOneRequiredWithoutCreatedGroupsNestedInput
    suggestions?: GroupSuggestionUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    minAge?: IntFieldUpdateOperationsInput | number
    maxAge?: IntFieldUpdateOperationsInput | number
    genres?: GroupUpdategenresInput | string[]
    image?: InputJsonValue | InputJsonValue | null
    likes?: GroupUpdatelikesInput | string[]
    dislikes?: GroupUpdatedislikesInput | string[]
    usersId?: GroupUpdateusersIdInput | string[]
    ownerId?: StringFieldUpdateOperationsInput | string
    suggestions?: GroupSuggestionUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateManyWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    minAge?: IntFieldUpdateOperationsInput | number
    maxAge?: IntFieldUpdateOperationsInput | number
    genres?: GroupUpdategenresInput | string[]
    image?: InputJsonValue | InputJsonValue | null
    likes?: GroupUpdatelikesInput | string[]
    dislikes?: GroupUpdatedislikesInput | string[]
    usersId?: GroupUpdateusersIdInput | string[]
    ownerId?: StringFieldUpdateOperationsInput | string
  }

  export type GroupUpdateWithoutOwnedByInput = {
    name?: StringFieldUpdateOperationsInput | string
    minAge?: IntFieldUpdateOperationsInput | number
    maxAge?: IntFieldUpdateOperationsInput | number
    genres?: GroupUpdategenresInput | string[]
    image?: InputJsonValue | InputJsonValue | null
    likes?: GroupUpdatelikesInput | string[]
    dislikes?: GroupUpdatedislikesInput | string[]
    users?: UserUpdateManyWithoutGroupsNestedInput
    suggestions?: GroupSuggestionUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateWithoutOwnedByInput = {
    name?: StringFieldUpdateOperationsInput | string
    minAge?: IntFieldUpdateOperationsInput | number
    maxAge?: IntFieldUpdateOperationsInput | number
    genres?: GroupUpdategenresInput | string[]
    image?: InputJsonValue | InputJsonValue | null
    likes?: GroupUpdatelikesInput | string[]
    dislikes?: GroupUpdatedislikesInput | string[]
    usersId?: GroupUpdateusersIdInput | string[]
    users?: UserUncheckedUpdateManyWithoutGroupsNestedInput
    suggestions?: GroupSuggestionUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateManyWithoutOwnedByInput = {
    name?: StringFieldUpdateOperationsInput | string
    minAge?: IntFieldUpdateOperationsInput | number
    maxAge?: IntFieldUpdateOperationsInput | number
    genres?: GroupUpdategenresInput | string[]
    image?: InputJsonValue | InputJsonValue | null
    likes?: GroupUpdatelikesInput | string[]
    dislikes?: GroupUpdatedislikesInput | string[]
    usersId?: GroupUpdateusersIdInput | string[]
  }

  export type GroupSuggestionCreateManyGroupInput = {
    id?: string
    title: string
    description: string
    genres?: GroupSuggestionCreategenresInput | string[]
    type: $Enums.MediaType
    platforms?: GroupSuggestionCreateplatformsInput | string[]
  }

  export type UserUpdateWithoutGroupsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstTime?: BoolFieldUpdateOperationsInput | boolean
    likes?: UserUpdatelikesInput | string[]
    dislikes?: UserUpdatedislikesInput | string[]
    genres?: UserUpdategenresInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    suggestions?: UserSuggestionUpdateManyWithoutAuthorNestedInput
    createdGroups?: GroupUpdateManyWithoutOwnedByNestedInput
  }

  export type UserUncheckedUpdateWithoutGroupsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstTime?: BoolFieldUpdateOperationsInput | boolean
    likes?: UserUpdatelikesInput | string[]
    dislikes?: UserUpdatedislikesInput | string[]
    genres?: UserUpdategenresInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groupsId?: UserUpdategroupsIdInput | string[]
    suggestions?: UserSuggestionUncheckedUpdateManyWithoutAuthorNestedInput
    createdGroups?: GroupUncheckedUpdateManyWithoutOwnedByNestedInput
  }

  export type UserUncheckedUpdateManyWithoutGroupsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstTime?: BoolFieldUpdateOperationsInput | boolean
    likes?: UserUpdatelikesInput | string[]
    dislikes?: UserUpdatedislikesInput | string[]
    genres?: UserUpdategenresInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groupsId?: UserUpdategroupsIdInput | string[]
  }

  export type GroupSuggestionUpdateWithoutGroupInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genres?: GroupSuggestionUpdategenresInput | string[]
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    platforms?: GroupSuggestionUpdateplatformsInput | string[]
  }

  export type GroupSuggestionUncheckedUpdateWithoutGroupInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genres?: GroupSuggestionUpdategenresInput | string[]
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    platforms?: GroupSuggestionUpdateplatformsInput | string[]
  }

  export type GroupSuggestionUncheckedUpdateManyWithoutGroupInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genres?: GroupSuggestionUpdategenresInput | string[]
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    platforms?: GroupSuggestionUpdateplatformsInput | string[]
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GroupCountOutputTypeDefaultArgs instead
     */
    export type GroupCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GroupCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GroupSuggestionDefaultArgs instead
     */
    export type GroupSuggestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GroupSuggestionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserSuggestionDefaultArgs instead
     */
    export type UserSuggestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserSuggestionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MediaDefaultArgs instead
     */
    export type MediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MediaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GroupDefaultArgs instead
     */
    export type GroupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GroupDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}